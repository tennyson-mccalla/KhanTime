{
  "openapi": "3.1.0",
  "info": {
    "title": "PowerPath API",
    "version": "1.0.0",
    "description": "TimeBack PowerPath 100 API\n\n# Authentication\n\nAll endpoints require authentication using the `Authorization: Bearer <token>` header.\n\nThe token can be obtained with:\n\n```\ncurl -X POST https://alpha-auth-production-idp.auth.us-west-2.amazoncognito.com/oauth2/token \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-d \"grant_type=client_credentials&client_id=<your-client-id>&client_secret=<your-client-secret>\"\n```\n\nUse the correct IDP server depending on the environment you're using:\n\n- Production Server:\n  https://alpha-auth-production-idp.auth.us-west-2.amazoncognito.com\n- Staging Server:\n  https://alpha-auth-development-idp.auth.us-west-2.amazoncognito.com\n\nReach out to the platform team to get a client/secret pair for your application.\n\n# Pagination\n\nOur API uses offset pagination for list endpoints. Paginated responses include the following fields:\n\n- `offset`: Offset for the next page of results\n- `limit`: Number of items per page (default: 100, maximum: 3000)\n\n**Note:** While the OneRoster specification does not define a maximum limit, this implementation enforces a maximum of 3000 items per page to prevent abuse and ensure optimal performance.\n\nExample request:\n\n```\nGET /ims/oneroster/rostering/v1p2/users?offset=20&limit=20\n```\n\nAll listing endpoints support offset pagination.\n\n# Filtering\n\nAll listing endpoints support filtering using the `filter` query parameter, following 1EdTech's filtering specification.\n\nThe filter should be a string with the following format:\n\n```\n?filter=[field][operator][value]\n```\n\nExample request:\n\n```\nGET /ims/oneroster/rostering/v1p2/users?filter=status='active'\n```\n\nExample request with multiple filters:\n\n```\nGET /ims/oneroster/rostering/v1p2/users?filter=status='active' AND name='John'\n```\n\n**Filtering by nested relations is not supported**.\n\n# Sorting\n\nAll listing endpoints support sorting using the `sort` and `orderBy` query parameters, following 1EdTech's sorting specification\n\nExample request:\n\n```\nGET /ims/oneroster/rostering/v1p2/users?sort=lastName&orderBy=asc\n```\n\n# Proprietary Extensions\n\nThis implementation includes proprietary extensions that extend beyond the official OneRoster 1.2 specification to provide additional functionality.\n\n## Search Parameter\n\nIn addition to the standard `filter` parameter, this implementation provides a `search` query parameter for simplified free-text searching:\n\n```\nGET /ims/oneroster/rostering/v1p2/users?search=john\n```\n\n**Purpose**: The `search` parameter enables convenient text-based queries across multiple fields simultaneously, whereas the standard `filter` parameter requires specifying exact field names and operators:\n\n```\n# Search parameter - searches across multiple fields automatically\nGET /ims/oneroster/rostering/v1p2/users?search=john\n\n# Equivalent using standard filter parameter\nGET /ims/oneroster/rostering/v1p2/users?filter=givenName~'john' OR familyName~'john'\n```\n\nThe `search` parameter performs case-insensitive partial matching across predefined fields for each endpoint, providing a more user-friendly querying experience.\n\n## OneRoster 1.2 Standard Parameters\n\nThe official OneRoster 1.2 specification defines these standard parameters:\n\n- `limit` - pagination limit\n- `offset` - pagination offset\n- `sort` - field to sort by\n- `orderBy` - sort direction (asc/desc)\n- `filter` - filtering expression\n- `fields` - field selection\n\n## Affected Endpoints\n\nThe proprietary `search` parameter is available on the following endpoints:\n\n**Rostering API**:\n\n- `GET /ims/oneroster/rostering/v1p2/academicSessions/`\n- `GET /ims/oneroster/rostering/v1p2/classes/`\n- `GET /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`\n- `GET /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers`\n- `GET /ims/oneroster/rostering/v1p2/courses/`\n- `GET /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes`\n- `GET /ims/oneroster/rostering/v1p2/demographics/`\n- `GET /ims/oneroster/rostering/v1p2/enrollments/`\n- `GET /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students`\n- `GET /ims/oneroster/rostering/v1p2/users/`\n\n**Gradebook API**:\n\n- `GET /ims/oneroster/gradebook/v1p2/assessmentLineItems/`\n- `GET /ims/oneroster/gradebook/v1p2/assessmentResults/`\n- `GET /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results`\n- `GET /ims/oneroster/gradebook/v1p2/results/`\n\n**Resources API**:\n\n- `GET /ims/oneroster/resources/v1p2/resources/`\n\n## Parameter Usage Guide\n\n### Filter Parameter\n\nThe standard `filter` parameter provides precise control over queries using these operators:\n\n- `=` - Exact match\n- `!=` - Not equal\n- `~` - Contains (case-insensitive)\n- `>`, `>=`, `<`, `<=` - Comparison operators\n- `@` - In list (comma-separated values)\n\n### Logical Operators\n\nCombine multiple conditions in filter expressions:\n\n- `AND` - Both conditions must be true\n- `OR` - Either condition must be true\n\n### Usage Examples\n\n```bash\n# Simple text search across multiple fields\nGET /users?search=john\n\n# Equivalent precise filtering\nGET /users?filter=givenName~'john' OR familyName~'john'\n\n# Complex filtering with multiple conditions\nGET /users?filter=status='active' AND givenName~'john'\n\n# Advanced filtering with different operators\nGET /users?filter=dateLastModified>'2023-01-01' AND status='active'\n```\n\n## Search Fields by Endpoint\n\nDifferent endpoints search across these predefined fields:\n\n- **Users**: `givenName`, `familyName`, `email`\n- **Courses**: `title`, `courseCode`\n- **Classes**: `title`\n- **Organizations**: `name`\n\n## Interoperability Notes\n\nThe `search` parameter is a proprietary extension specific to this implementation. Other OneRoster-compliant systems may only support the standard `filter` parameter. When building applications that need to work with multiple OneRoster providers, consider using the standard filtering approach.\n\n## Additional Schema Fields\n\n### AssessmentLineItem Extensions\n\nThe AssessmentLineItem schema includes two proprietary fields that extend curriculum mapping capabilities:\n\n#### Component Field\n\n- **Field**: `component`\n- **Type**: Object reference (`{ sourcedId: string }`)\n- **Purpose**: Direct association between assessment line items and course components, enabling enhanced curriculum mapping and learning pathway tracking.\n\n#### ComponentResource Field\n\n- **Field**: `componentResource`\n- **Type**: Object reference (`{ sourcedId: string }`)\n- **Purpose**: Direct association between assessment line items and specific learning resources, supporting detailed content-to-assessment relationships and adaptive learning features.\n\n**Example Usage**:\n\n```json\n{\n  \"sourcedId\": \"assessment-123\",\n  \"title\": \"Chapter 5 Quiz\",\n  \"component\": { \"sourcedId\": \"component-456\" },\n  \"componentResource\": { \"sourcedId\": \"resource-789\" }\n}\n```\n\n## Affected Endpoints\n\n### Schema Extensions Availability\n\nThe proprietary schema fields are available in:\n\n**Gradebook API**:\n\n- `GET /ims/oneroster/gradebook/v1p2/assessmentLineItems/` - Returns assessmentLineItems with `component` and `componentResource` fields\n- `GET /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}` - Returns individual assessmentLineItem with extended fields\n- `POST /ims/oneroster/gradebook/v1p2/assessmentLineItems/` - Accepts `component` and `componentResource` in request body\n- `PUT /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}` - Accepts extended fields for updates\n"
  },
  "servers": [
    {
      "url": "https://api.alpha-1edtech.com",
      "description": "PowerPath API"
    }
  ],
  "tags": [
    {
      "name": "PowerPath - Course Mastery"
    },
    {
      "name": "PowerPath - Lesson Mastery",
      "description": "Track and manage student mastery of lesson objectives, through PowerPath 100 lessons"
    },
    {
      "name": "PowerPath - Lesson Plans",
      "description": "Manage lesson plans and instructional content"
    },
    {
      "name": "PowerPath - Placement"
    }
  ],
  "security": [
    {
      "OAuth2": []
    }
  ],
  "paths": {
    "/powerpath/placement/getAllPlacementTests": {
      "get": {
        "operationId": "getAllPlacementTests",
        "summary": "Get all placement tests",
        "description": "\nReturns all placement tests for a subject, including available results for each.\n\nA 'Lesson' (placement test) in this context is a ComponentResource object which has a Resource object with metadata.lessonType = \"placement\" associated with it.\n",
        "tags": [
          "PowerPath - Placement"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "student",
            "description": "The sourcedId of the student",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the student"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "subject",
            "description": "The subject name",
            "schema": {
              "type": "string",
              "description": "The subject name",
              "enum": [
                "Reading",
                "Language",
                "Vocabulary",
                "Social Studies",
                "Writing",
                "Science",
                "FastMath",
                "Math"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "placementTests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "component_resources": {
                            "type": "object"
                          },
                          "resources": {
                            "type": "object"
                          },
                          "resources_metadata": {
                            "type": "object"
                          },
                          "assessment_line_items": {
                            "type": [
                              "object",
                              "null"
                            ]
                          },
                          "assessment_results": {
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": "object"
                            }
                          }
                        },
                        "required": [
                          "component_resources",
                          "resources",
                          "resources_metadata",
                          "assessment_line_items",
                          "assessment_results"
                        ]
                      }
                    }
                  },
                  "required": [
                    "placementTests"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/placement/getCurrentLevel": {
      "get": {
        "operationId": "getCurrentLevel",
        "summary": "Get current level",
        "description": "\nReturns the current level of the student in a placement process:\n- The level is determined by the last completed placement test's grade level, starting from the lowest grade level available for the subject's placement tests.\n- As the student completes placement tests and attains scores of 90 or greater, their level updates to the next level available for the subject.\n\nAlso returns the 'onboarded' boolean that indicates if the student completed the onboarding process for the subject:\n- A 'onboarded = true' means they either completed and passed all placement tests or they have gotten a score smaller than 90 in the last completed placement test.\n- A 'onboarded = false' means they haven't completed placement tests yet or have achieved a score of 90 or greater in the last completed placement test and there are more tests to take.\n",
        "tags": [
          "PowerPath - Placement"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "student",
            "description": "The sourcedId of the student",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the student"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "subject",
            "description": "The subject name",
            "schema": {
              "type": "string",
              "description": "The subject name",
              "enum": [
                "Reading",
                "Language",
                "Vocabulary",
                "Social Studies",
                "Writing",
                "Science",
                "FastMath",
                "Math"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "gradeLevel": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/GradeEnum"
                            }
                          ],
                          "description": "The grades of the course",
                          "enum": [
                            "-1",
                            "0",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "10",
                            "11",
                            "12",
                            "13"
                          ]
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "The grade level of the current level in the subject"
                    },
                    "onboarded": {
                      "type": "boolean",
                      "description": "Whether the student has completed the onboarding process for the subject"
                    },
                    "availableTests": {
                      "type": "number",
                      "description": "The number of placement tests available for the subject"
                    }
                  },
                  "required": [
                    "gradeLevel",
                    "onboarded",
                    "availableTests"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/placement/getNextPlacementTest": {
      "get": {
        "operationId": "getNextPlacementTest",
        "summary": "Get next placement test",
        "description": "\nReturns the next placement test for the student in a subject:\n- If the student has completed all placement tests for the subject, the next test's lesson ID will be null. Tests will also be marked as exhausted.\n- If the student hasn't completed a single placement test, returns the first placement test's lesson ID for the subject.\n- If the student has completed some placement tests, it will return null for the next test's lesson ID if the last completed test had a score smaller than 90.\n- Alternatively, it will return the next available placement test's lesson ID if the score was greater than or equal to 90.\n\nAlso returns the 'onboarded' boolean that indicates if the student completed the onboarding process for the subject:\n- A 'onboarded = true' means they either completed and passed all placement tests or they have gotten a score smaller than 90 in the last completed placement test.\n- A 'onboarded = false' means they haven't completed placement tests yet or have achieved a score of 90 or greater in the last completed placement test and there are more tests to take.\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object with metadata.lessonType = \"placement\" associated with it.\n",
        "tags": [
          "PowerPath - Placement"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "student",
            "description": "The sourcedId of the student",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the student"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "subject",
            "description": "The subject name",
            "schema": {
              "type": "string",
              "description": "The subject name",
              "enum": [
                "Reading",
                "Language",
                "Vocabulary",
                "Social Studies",
                "Writing",
                "Science",
                "FastMath",
                "Math"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exhaustedTests": {
                      "type": "boolean",
                      "description": "Whether the student has exhausted all placement tests"
                    },
                    "gradeLevel": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/GradeEnum"
                            }
                          ],
                          "description": "The grades of the course",
                          "enum": [
                            "-1",
                            "0",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "10",
                            "11",
                            "12",
                            "13"
                          ]
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "The grade level of the next placement test"
                    },
                    "lesson": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The sourcedId of the next placement test (ComponentResource)"
                    },
                    "onboarded": {
                      "type": "boolean",
                      "description": "Whether the student has completed the onboarding process for the subject"
                    },
                    "availableTests": {
                      "type": "number",
                      "description": "The number of placement tests available for the subject"
                    }
                  },
                  "required": [
                    "exhaustedTests",
                    "gradeLevel",
                    "lesson",
                    "onboarded",
                    "availableTests"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/placement/getSubjectProgress": {
      "get": {
        "operationId": "getSubjectProgress",
        "summary": "Get subject progress",
        "description": "\nReturns the progress the student has made in the given subject\n",
        "tags": [
          "PowerPath - Placement"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "student",
            "description": "The sourcedId of the student",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the student"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "subject",
            "description": "The subject name",
            "schema": {
              "type": "string",
              "description": "The subject name",
              "enum": [
                "Reading",
                "Language",
                "Vocabulary",
                "Social Studies",
                "Writing",
                "Science",
                "FastMath",
                "Math"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "progress": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "course": {
                            "type": "object",
                            "properties": {
                              "courseCode": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "dateLastModified": {
                                "type": "string"
                              },
                              "grades": {
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/GradeEnum"
                                    }
                                  ],
                                  "description": "The grades of the course",
                                  "enum": [
                                    "-1",
                                    "0",
                                    "1",
                                    "2",
                                    "3",
                                    "4",
                                    "5",
                                    "6",
                                    "7",
                                    "8",
                                    "9",
                                    "10",
                                    "11",
                                    "12",
                                    "13"
                                  ]
                                }
                              },
                              "level": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "orgSourcedId": {
                                "type": "string"
                              },
                              "sourcedId": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "subjects": {
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/SubjectEnum"
                                    }
                                  ],
                                  "description": "The subjects of the course",
                                  "enum": [
                                    "Reading",
                                    "Language",
                                    "Vocabulary",
                                    "Social Studies",
                                    "Writing",
                                    "Science",
                                    "FastMath",
                                    "Math"
                                  ]
                                }
                              },
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "courseCode",
                              "dateLastModified",
                              "grades",
                              "level",
                              "orgSourcedId",
                              "sourcedId",
                              "status",
                              "subjects",
                              "title"
                            ]
                          },
                          "inEnrolled": {
                            "type": "boolean"
                          },
                          "hasUsedTestOut": {
                            "type": "boolean",
                            "description": "Whether the student has a fully graded assessment result for a test-out lesson in the course"
                          },
                          "testOutLessonId": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "The sourcedId of the test-out lesson (ComponentResource) in the course"
                          },
                          "completedLessons": {
                            "type": "number",
                            "description": "The number of lessons that contain an assessment result with a score status of 'fully graded'"
                          },
                          "totalLessons": {
                            "type": "number",
                            "description": "The total number of lessons in the course"
                          },
                          "totalAttainableXp": {
                            "type": "number",
                            "description": "The total XP that can be earned by the student in the course, not considering potential multipliers"
                          },
                          "totalXpEarned": {
                            "type": "number",
                            "description": "The total XP earned by the student considering calculated multipliers"
                          }
                        },
                        "required": [
                          "course",
                          "inEnrolled",
                          "hasUsedTestOut",
                          "testOutLessonId",
                          "completedLessons",
                          "totalLessons",
                          "totalAttainableXp",
                          "totalXpEarned"
                        ],
                        "description": "The overview of the course's progress"
                      },
                      "description": "The progress of the student in each of the subject's courses"
                    }
                  },
                  "required": [
                    "progress"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/screening/results/{userId}": {
      "get": {
        "operationId": "getResults",
        "summary": "Get results",
        "description": "Get results for a user",
        "tags": [
          "PowerPath - Placement"
        ],
        "parameters": [
          {
            "name": "userId",
            "description": "User ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "grade": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/GradeEnum"
                          }
                        ],
                        "description": "The grades of the course",
                        "enum": [
                          "-1",
                          "0",
                          "1",
                          "2",
                          "3",
                          "4",
                          "5",
                          "6",
                          "7",
                          "8",
                          "9",
                          "10",
                          "11",
                          "12",
                          "13"
                        ]
                      },
                      "ritScore": {
                        "type": "number"
                      },
                      "testName": {
                        "type": "string"
                      },
                      "completedAt": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "grade",
                      "ritScore",
                      "testName",
                      "completedAt"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/screening/session/{userId}": {
      "get": {
        "operationId": "getSession",
        "summary": "Get session",
        "description": "Get session for a user",
        "tags": [
          "PowerPath - Placement"
        ],
        "parameters": [
          {
            "name": "userId",
            "description": "User ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nweaStudentId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "createdOn": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "password": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "proctorId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "pin": {
                      "type": "string"
                    },
                    "testSessionId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "inactive"
                      ]
                    },
                    "assignment": {
                      "type": "object",
                      "properties": {
                        "assignedTestKey": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "status": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "enqueued",
                            "assigned",
                            "in_progress",
                            "blocked",
                            "completed",
                            "abandoned",
                            "failed",
                            null
                          ]
                        },
                        "nweaStatus": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "ENQUEUED",
                            "AWAITING_STUDENT",
                            "IN_PROGRESS",
                            "PAUSED",
                            "SUSPENDED",
                            "TERMINATED",
                            "ABANDONED",
                            "COMPLETED",
                            "FAILED",
                            null
                          ]
                        }
                      },
                      "required": [
                        "assignedTestKey",
                        "status",
                        "nweaStatus"
                      ]
                    },
                    "termId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "nweaStudentId",
                    "createdOn",
                    "password",
                    "name",
                    "proctorId",
                    "pin",
                    "testSessionId",
                    "status",
                    "assignment",
                    "termId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/screening/tests/assign": {
      "post": {
        "operationId": "assignTest",
        "summary": "Assign test",
        "description": "Assign test to a user",
        "tags": [
          "PowerPath - Placement"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string",
                    "enum": [
                      "Math",
                      "Reading",
                      "Language",
                      "Science"
                    ]
                  }
                },
                "required": [
                  "userId",
                  "subject"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test assigned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "assignedTestKey": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "testName": {
                        "type": "string"
                      },
                      "testSessionId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "updatedOn": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "nweaStatus": {
                        "type": "string",
                        "enum": [
                          "ENQUEUED",
                          "AWAITING_STUDENT",
                          "IN_PROGRESS",
                          "PAUSED",
                          "SUSPENDED",
                          "TERMINATED",
                          "ABANDONED",
                          "COMPLETED",
                          "FAILED"
                        ]
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "enqueued",
                          "assigned",
                          "in_progress",
                          "blocked",
                          "completed",
                          "abandoned",
                          "failed"
                        ]
                      },
                      "studentId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "studentName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "assignedTestKey",
                      "email",
                      "testName",
                      "testSessionId",
                      "updatedOn",
                      "nweaStatus",
                      "status",
                      "studentId",
                      "studentName"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/createExternalPlacementTest": {
      "post": {
        "operationId": "createExternalPlacementTest",
        "summary": "Create an External Placement Test",
        "description": "\nCreates or updates a ComponentResource to act as a Placement Test lesson in a course.\nThis allows integrating with external test-taking platforms (like Edulastic) for content delivery.\n\nThe endpoint creates or updates (if they already exist) the following entities:\n- A CourseComponent for the course to hold the Placement Test lesson\n- A Resource with lessonType = \"placement\" and the external service details as metadata\n- A ComponentResource acting as the Placement Test lesson\n\nA test assignment is mandatory in order to obtain access credentials for this test on the external platform, as well as to obtain the IDs necessary for fetching test results later on:\n- For test assignments, use the \"makeExternalTestAssignment\" endpoint.\n- For test results retrieval, use the \"importExternalTestAssignmentResults\" endpoint.\n\nIf a 'courseIdOnFail' parameter is supplied, its Course's sourcedId will be used to automatically enroll the student when the placement test is completed with a score below 90 %. When the parameter is omitted (or set to null), no automatic enrollment will happen.\n\nThis request fails if:\n- The 'course' provided does not exist, or a non-null 'courseIdOnFail' references a non-existent course\n- An existing Placement Test lesson in the course, targeting the same grade, has a different toolProvider than the one provided (need to perform an update to the Resource first, altering the \"toolProvider\", before trying again)\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object with lessonType = \"placement\" associated with it.\n",
        "tags": [
          "PowerPath - Course Mastery"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateExternalTestOutInput"
                  },
                  {
                    "$ref": "#/components/schemas/CreateExternalPlacementInput"
                  }
                ],
                "discriminator": {
                  "propertyName": "lessonType",
                  "mapping": {
                    "test-out": "#/components/schemas/CreateExternalTestOutInput",
                    "placement": "#/components/schemas/CreateExternalPlacementInput"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonType": {
                      "type": "string",
                      "enum": [
                        "powerpath-100",
                        "quiz",
                        "test-out",
                        "placement",
                        "unit-test",
                        "alpha-read-article"
                      ]
                    },
                    "lessonId": {
                      "type": "string",
                      "description": "The sourcedId of the created external test reference (ComponentResource)"
                    },
                    "courseComponentId": {
                      "type": "string",
                      "description": "The sourcedId of the component (unit) containing the test"
                    },
                    "resourceId": {
                      "type": "string",
                      "description": "The sourcedId of the resource representing the external test"
                    },
                    "launchUrl": {
                      "type": "string",
                      "description": "The URL to the external test system"
                    },
                    "toolProvider": {
                      "type": "string",
                      "description": "The tool provider id"
                    },
                    "vendorId": {
                      "type": "string",
                      "description": "The ID of the test in the spreadsheet"
                    },
                    "courseIdOnFail": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The courseId to enroll the student in if they fail the placement test (optional)"
                    },
                    "grades": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/GradeEnum"
                          }
                        ],
                        "description": "The grades of the course",
                        "enum": [
                          "-1",
                          "0",
                          "1",
                          "2",
                          "3",
                          "4",
                          "5",
                          "6",
                          "7",
                          "8",
                          "9",
                          "10",
                          "11",
                          "12",
                          "13"
                        ]
                      },
                      "description": "The grades for the resource"
                    }
                  },
                  "required": [
                    "lessonType",
                    "lessonId",
                    "courseComponentId",
                    "resourceId",
                    "toolProvider"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/createExternalTestOut": {
      "post": {
        "operationId": "createExternalTestOut",
        "summary": "Create an External TestOut",
        "description": "\nCreates or updates a ComponentResource to act as a TestOut lesson in a course.\nThis allows integrating with external test-taking platforms (like Edulastic) for content delivery.\n\nThe endpoint creates or updates (if they already exist) the following entities:\n- A CourseComponent for the course to hold the TestOut lesson\n- A Resource with lessonType = \"test-out\" and the external service details as metadata\n- A ComponentResource acting as the TestOut lesson\n\nA test assignment is mandatory in order to obtain access credentials for this test on the external platform, as well as to obtain the IDs necessary for fetching test results later on:\n- For test assignments, use the \"makeExternalTestAssignment\" endpoint.\n- For test results retrieval, use the \"importExternalTestAssignmentResults\" endpoint.\n\nThis request fails if:\n- The course provided does not exist\n- An existing TestOut lesson in the course has a different toolProvider than the one provided (need to perform an update to the Resource first, altering the \"toolProvider\", before trying again)\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object with lessonType = \"test-out\" associated with it.\n",
        "tags": [
          "PowerPath - Course Mastery"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateExternalTestOutInput"
                  },
                  {
                    "$ref": "#/components/schemas/CreateExternalPlacementInput"
                  }
                ],
                "discriminator": {
                  "propertyName": "lessonType",
                  "mapping": {
                    "test-out": "#/components/schemas/CreateExternalTestOutInput",
                    "placement": "#/components/schemas/CreateExternalPlacementInput"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonType": {
                      "type": "string",
                      "enum": [
                        "powerpath-100",
                        "quiz",
                        "test-out",
                        "placement",
                        "unit-test",
                        "alpha-read-article"
                      ]
                    },
                    "lessonId": {
                      "type": "string",
                      "description": "The sourcedId of the created external test reference (ComponentResource)"
                    },
                    "courseComponentId": {
                      "type": "string",
                      "description": "The sourcedId of the component (unit) containing the test"
                    },
                    "resourceId": {
                      "type": "string",
                      "description": "The sourcedId of the resource representing the external test"
                    },
                    "launchUrl": {
                      "type": "string",
                      "description": "The URL to the external test system"
                    },
                    "toolProvider": {
                      "type": "string",
                      "description": "The tool provider id"
                    },
                    "vendorId": {
                      "type": "string",
                      "description": "The ID of the test in the spreadsheet"
                    },
                    "courseIdOnFail": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The courseId to enroll the student in if they fail the placement test (optional)"
                    },
                    "grades": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/GradeEnum"
                          }
                        ],
                        "description": "The grades of the course",
                        "enum": [
                          "-1",
                          "0",
                          "1",
                          "2",
                          "3",
                          "4",
                          "5",
                          "6",
                          "7",
                          "8",
                          "9",
                          "10",
                          "11",
                          "12",
                          "13"
                        ]
                      },
                      "description": "The grades for the resource"
                    }
                  },
                  "required": [
                    "lessonType",
                    "lessonId",
                    "courseComponentId",
                    "resourceId",
                    "toolProvider"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/createInternalTest": {
      "post": {
        "operationId": "createInternalTest",
        "summary": "Create an Internal Test",
        "description": "\nCreates or updates a ComponentResource to act as an internal test lesson in a course.\nThis allows creating tests using internal QTI resources or assessment banks with multiple QTI resources.\n\nThe endpoint creates or updates (if they already exist) the following entities:\n- A CourseComponent for the course to hold the test lesson\n- One or more Resources with type = \"qti\" for individual tests, or type = \"assessment-bank\" for test banks\n- A ComponentResource acting as the test lesson\n\nSupports two test types:\n- Regular QTI test: Creates a single QTI resource\n- Assessment Bank: Creates multiple QTI resources and wraps them in an assessment bank\n\nFor test-out and placement lessons, this will update existing tests of the same type.\nFor other lesson types (quiz, unit-test, pp-100), it will create new lessons in the course structure.\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object associated with it.\n",
        "tags": [
          "PowerPath - Course Mastery"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateInternalQtiTestInput"
                  },
                  {
                    "$ref": "#/components/schemas/CreateInternalAssessmentBankInput"
                  }
                ],
                "discriminator": {
                  "propertyName": "testType",
                  "mapping": {
                    "qti": "#/components/schemas/CreateInternalQtiTestInput",
                    "assessment-bank": "#/components/schemas/CreateInternalAssessmentBankInput"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonType": {
                      "type": "string",
                      "enum": [
                        "powerpath-100",
                        "quiz",
                        "test-out",
                        "placement",
                        "unit-test",
                        "alpha-read-article"
                      ]
                    },
                    "testType": {
                      "type": "string",
                      "enum": [
                        "qti",
                        "assessment-bank"
                      ]
                    },
                    "lessonId": {
                      "type": "string",
                      "description": "The sourcedId of the created internal test lesson (ComponentResource)"
                    },
                    "courseComponentId": {
                      "type": "string",
                      "description": "The sourcedId of the component (unit) containing the test"
                    },
                    "resourceId": {
                      "type": "string",
                      "description": "The sourcedId of the main resource (parent for assessment-bank)"
                    },
                    "childResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of child resource IDs (only for assessment-bank type)"
                    },
                    "courseIdOnFail": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The courseId to enroll the student in if they fail the placement test (optional)"
                    },
                    "grades": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/GradeEnum"
                          }
                        ],
                        "description": "The grades of the course",
                        "enum": [
                          "-1",
                          "0",
                          "1",
                          "2",
                          "3",
                          "4",
                          "5",
                          "6",
                          "7",
                          "8",
                          "9",
                          "10",
                          "11",
                          "12",
                          "13"
                        ]
                      },
                      "description": "The grades for the resource (for placement tests)"
                    }
                  },
                  "required": [
                    "lessonType",
                    "testType",
                    "lessonId",
                    "courseComponentId",
                    "resourceId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/importExternalTestAssignmentResults": {
      "get": {
        "operationId": "importExternalTestAssignmentResults",
        "summary": "Import external test assignment results",
        "description": "\nRetrieves and stores the results of the external test assignment:\n- Applies to both 'test-out' and 'placement' lessons.\n\nThis logic changes depending on the stored \"toolProvider\" of the lesson:\n- For \"edulastic\" (currently the only one supported):\n  - If the lesson is already finalized, no data import is performed.\n  - If the lesson is not finalized, this will start populating the test and question results with available data, including question scores and feedback. The test will then be deemed finalized when all questions have been answered and the test grade is \"GRADED\".\n\nWill fail if:\n- The lesson is not an external \"test-out\" or \"placement\", or the student does not exist\n- Credentials for data consumption are not available in the test result of this student (meaning a previous test assignment was not made)\n- Any other problem on the Edulastic API being used that may happen\n\nThe actual test results can be retrieved by using the \"getAssessmentProgress\" endpoint.\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object with lessonType = \"test-out\" or \"placement\" associated with it.\n",
        "tags": [
          "PowerPath - Course Mastery"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "student",
            "description": "The sourcedId of the student",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the student"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "lesson",
            "description": "The sourcedId of the lesson (ComponentResource)",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the lesson (ComponentResource)"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "applicationName",
            "description": "The name of the application",
            "schema": {
              "type": "string",
              "description": "The name of the application"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonType": {
                      "type": "string",
                      "enum": [
                        "test-out",
                        "placement",
                        "unit-test"
                      ]
                    },
                    "lessonId": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The sourcedId of the lesson (ComponentResource)"
                    },
                    "toolProvider": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The tool provider for the lesson (ComponentResource)"
                    },
                    "finalized": {
                      "type": "boolean",
                      "description": "Whether the Test has been finalized in the current attempt"
                    },
                    "attempt": {
                      "type": "number",
                      "description": "The attempt number"
                    },
                    "credentials": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "password": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "email",
                        "password"
                      ],
                      "description": "The credentials for accessing the assigned test on external tool"
                    },
                    "assignmentId": {
                      "type": "string",
                      "description": "The id of the assignment on external tool for results retrieval"
                    },
                    "classId": {
                      "type": "string",
                      "description": "The id of the class on external tool for results retrieval (may be empty for some tools)"
                    },
                    "testUrl": {
                      "type": "string",
                      "format": "uri",
                      "description": "The URL of the test on external tool"
                    },
                    "testId": {
                      "type": "string",
                      "description": "The id of the test on external tool (may be assignment ID for some tools)"
                    },
                    "courseIdOnFail": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The courseId to enroll the student in if they fail the placement test (can be null)"
                    },
                    "hasFallbackCourse": {
                      "type": "boolean",
                      "description": "Whether the test has a fallback course for auto-enrollment on failure"
                    }
                  },
                  "required": [
                    "lessonType",
                    "lessonId",
                    "toolProvider",
                    "finalized",
                    "attempt",
                    "courseIdOnFail",
                    "hasFallbackCourse"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/makeExternalTestAssignment": {
      "post": {
        "operationId": "makeExternalTestAssignment",
        "summary": "Make external test assignment",
        "description": "\nMakes an external test assignment for the given student:\n- Applies to both 'test-out' and 'placement' lessons.\n\nThis logic changes depending on the provided \"toolProvider\" value:\n- For \"edulastic\" (currently the only one supported):\n  - Authenticates the student with their email on Edulastic\n  - Assigns the test to the student in Edulastic\n  - Stores the received \"assignmentId\" and \"classId\" in the lesson's AssessmentResult\n  - Returns the test link, credentials, and IDs of the test for later results consumption\n\nWill fail if:\n- The lesson is not an external \"test-out\" or \"placement\", or the student does not exist\n- External tool (described in the resource.metadata.toolProvider) is not \"edulastic\"\n- Any other problem on the Edulastic API being used that may happen\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object with lessonType = \"test-out\" or \"placement\" associated with it.\n",
        "tags": [
          "PowerPath - Course Mastery"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "student": {
                    "type": "string",
                    "description": "The sourcedId of the student"
                  },
                  "lesson": {
                    "type": "string",
                    "description": "The sourcedId of the lesson (ComponentResource)"
                  },
                  "applicationName": {
                    "type": "string",
                    "description": "The name of the application to use for authenticating on the external tool"
                  }
                },
                "required": [
                  "student",
                  "lesson"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "toolProvider": {
                      "type": "string",
                      "enum": [
                        "edulastic",
                        "mastery-track"
                      ]
                    },
                    "lessonType": {
                      "type": "string",
                      "enum": [
                        "test-out",
                        "placement",
                        "unit-test"
                      ]
                    },
                    "attempt": {
                      "type": "number",
                      "description": "The attempt number"
                    },
                    "credentials": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "password": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "email",
                        "password"
                      ],
                      "description": "The credentials for accessing the assigned test on external tool"
                    },
                    "assignmentId": {
                      "type": "string",
                      "description": "The id of the assignment on external tool for results retrieval"
                    },
                    "classId": {
                      "type": "string",
                      "description": "The id of the class on external tool for results retrieval (may be empty for some tools)"
                    },
                    "testUrl": {
                      "type": "string",
                      "format": "uri",
                      "description": "The URL of the test on external tool"
                    },
                    "testId": {
                      "type": "string",
                      "description": "The id of the test on external tool (may be assignment ID for some tools)"
                    }
                  },
                  "required": [
                    "toolProvider",
                    "lessonType",
                    "attempt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/testOut": {
      "get": {
        "operationId": "testOut",
        "summary": "Test out",
        "description": "\nReturns the testOut lesson reference for the given student and course.\n\n- TestOut is a lesson that represents the end-of-course test, covering the entire course content.\n- The testOut should be specified by a Resource with metadata.lessonType = \"test-out\".\n\nDetails:\n- Returns a null lessonId in case no Resource with metadata.lessonType = \"test-out\" is found in the course.\n- In case student has already taken the TestOut, this will return the \"finalized\" flag set to true.\n- In case this is an external TestOut, also return external access credentials, if available (i.e. test was previously assigned to student).\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object with metadata.lessonType = \"test-out\" associated with it.\n",
        "tags": [
          "PowerPath - Course Mastery"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "student",
            "description": "The sourcedId of the student to retrieve the testOut for",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the student to retrieve the testOut for"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "course",
            "description": "The sourcedId of the Course to retrieve the testOut from",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the Course to retrieve the testOut from"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestOutResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/lessonPlans/": {
      "post": {
        "operationId": "createLessonPlan",
        "summary": "Create a lesson plan",
        "description": "Purpose: Create a new lesson plan for a course and student\n\nWhen to use:\n- When a new student is enrolled in a course\n- For initial setup of a student's learning path\n- When you need to create a lesson plan from scratch\n\nWhat it does:\n- Creates a new lesson plan\n- Associates it with the course and student\n- Optionally, associates it with a class\n- Returns the lesson plan ID\n- If the lesson plan already exists, returns the existing lesson plan ID\n- If the course, user or class is not found, returns a 404 error\n    ",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "courseId": {
                    "type": "string",
                    "description": "The Sourced ID of the course"
                  },
                  "userId": {
                    "type": "string",
                    "description": "The Sourced ID of the student"
                  },
                  "classId": {
                    "type": "string",
                    "description": "(optional) The Sourced ID of the class. Defaults to current year's class for the student"
                  }
                },
                "required": [
                  "courseId",
                  "userId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lesson plan already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonPlanId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "lessonPlanId"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Lesson plan created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonPlanId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "lessonPlanId"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Course, User or Class not found"
          }
        }
      }
    },
    "/powerpath/lessonPlans/{courseId}/{userId}": {
      "get": {
        "operationId": "getTree",
        "summary": "Returns the lesson plan tree for a course and student",
        "description": "\nGiven a course sourced ID and a user sourced ID, returns the lesson plan tree.\n\nThe lesson plan tree is nested object comprised of several lessonPlanItems, \nwhich are nodes that contain information about the lesson plan - including which component or component resource is associated with that node, \nas well as which node is its parent.\n\nA node may reference a component or a componentResource.\nA node with no parent is considered at the root level of the lesson plan tree.\n\nA student's lesson plan has a unique ID that can be used instead of the parameters to retrieve it.\n    ",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "courseId",
            "description": "Course Sourced ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "User Sourced ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonPlan": {
                      "type": "object",
                      "properties": {
                        "lessonPlan": {
                          "type": "object",
                          "properties": {
                            "course": {
                              "type": "object",
                              "properties": {
                                "sourcedId": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "active",
                                    "tobedeleted"
                                  ]
                                },
                                "dateLastModified": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "metadata": {
                                  "type": "object",
                                  "additionalProperties": true,
                                  "nullable": true,
                                  "description": "Additional metadata for the object"
                                },
                                "title": {
                                  "type": "string"
                                },
                                "academicSession": {
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "sourcedId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "sourcedId"
                                  ]
                                },
                                "schoolYear": {
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "href": {
                                      "type": "string",
                                      "format": "uri"
                                    },
                                    "sourcedId": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "academicSession",
                                        "assessmentLineItem",
                                        "category",
                                        "class",
                                        "course",
                                        "demographics",
                                        "enrollment",
                                        "gradingPeriod",
                                        "lineItem",
                                        "org",
                                        "resource",
                                        "result",
                                        "scoreScale",
                                        "student",
                                        "teacher",
                                        "term",
                                        "user",
                                        "componentResource",
                                        "courseComponent"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "href",
                                    "sourcedId",
                                    "type"
                                  ]
                                },
                                "courseCode": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "grades": {
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/GradeEnum"
                                      }
                                    ],
                                    "description": "The grades of the course",
                                    "enum": [
                                      "-1",
                                      "0",
                                      "1",
                                      "2",
                                      "3",
                                      "4",
                                      "5",
                                      "6",
                                      "7",
                                      "8",
                                      "9",
                                      "10",
                                      "11",
                                      "12",
                                      "13"
                                    ]
                                  }
                                },
                                "subjects": {
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/SubjectEnum"
                                      }
                                    ],
                                    "description": "The subjects of the course",
                                    "enum": [
                                      "Reading",
                                      "Language",
                                      "Vocabulary",
                                      "Social Studies",
                                      "Writing",
                                      "Science",
                                      "FastMath",
                                      "Math"
                                    ]
                                  }
                                },
                                "subjectCodes": {
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "org": {
                                  "type": "object",
                                  "properties": {
                                    "sourcedId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "sourcedId"
                                  ]
                                },
                                "level": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "gradingScheme": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "resources": {
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "href": {
                                        "type": "string",
                                        "format": "uri"
                                      },
                                      "sourcedId": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "academicSession",
                                          "assessmentLineItem",
                                          "category",
                                          "class",
                                          "course",
                                          "demographics",
                                          "enrollment",
                                          "gradingPeriod",
                                          "lineItem",
                                          "org",
                                          "resource",
                                          "result",
                                          "scoreScale",
                                          "student",
                                          "teacher",
                                          "term",
                                          "user",
                                          "componentResource",
                                          "courseComponent"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "href",
                                      "sourcedId",
                                      "type"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "status",
                                "title",
                                "org"
                              ],
                              "description": "Represents a course."
                            },
                            "subComponents": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/LessonPlanTreeComponent"
                              }
                            }
                          },
                          "required": [
                            "course",
                            "subComponents"
                          ]
                        }
                      },
                      "required": [
                        "lessonPlan"
                      ]
                    }
                  },
                  "required": [
                    "lessonPlan"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Lesson Plan not found"
          }
        }
      }
    },
    "/powerpath/lessonPlans/{courseId}/deleteAll": {
      "delete": {
        "operationId": "deleteLessonPlansByCourseId",
        "summary": "Delete all lesson plans for a course",
        "description": "\n    Deletes all lesson plans for a course by its ID.",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "courseId",
            "description": "Course ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Lesson Plans deleted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Course not found"
          }
        }
      }
    },
    "/powerpath/lessonPlans/{lessonPlanId}/operations": {
      "post": {
        "operationId": "storeOperation",
        "summary": "Store an operation on a lesson plan",
        "description": "Purpose: Store a new operation in the lesson plan's operation log\n\nWhen to use:\n- Primary endpoint for all lesson plan modifications\n- When students, guides or admins want to customize the learning path\n- For any personalization changes\n\nAvailable Operations:\n\n- set-skipped: Show/hide content for the student\n- move-item-before/after: Reorder content relative to other items\n- move-item-to-start/end: Move to beginning/end of parent\n- add-custom-resource: Add additional resources in the lesson plan\n- change-item-parent: Move content to different sections (components) in the lesson plan\n\n  ",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "lessonPlanId",
            "description": "Lesson plan ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operation": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/SetSkippedCommand"
                      },
                      {
                        "$ref": "#/components/schemas/AddCustomResourceCommand"
                      },
                      {
                        "$ref": "#/components/schemas/MoveItemBeforeCommand"
                      },
                      {
                        "$ref": "#/components/schemas/MoveItemAfterCommand"
                      },
                      {
                        "$ref": "#/components/schemas/MoveItemToStartCommand"
                      },
                      {
                        "$ref": "#/components/schemas/MoveItemToEndCommand"
                      },
                      {
                        "$ref": "#/components/schemas/ChangeItemParentCommand"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "set-skipped": "#/components/schemas/SetSkippedCommand",
                        "add-custom-resource": "#/components/schemas/AddCustomResourceCommand",
                        "move-item-before": "#/components/schemas/MoveItemBeforeCommand",
                        "move-item-after": "#/components/schemas/MoveItemAfterCommand",
                        "move-item-to-start": "#/components/schemas/MoveItemToStartCommand",
                        "move-item-to-end": "#/components/schemas/MoveItemToEndCommand",
                        "change-item-parent": "#/components/schemas/ChangeItemParentCommand"
                      }
                    }
                  },
                  "reason": {
                    "type": "string",
                    "description": "The reason for the operation"
                  }
                },
                "required": [
                  "operation"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation stored",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "operationId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getOperations",
        "summary": "Get the operations for a lesson plan",
        "description": "Purpose: Get all operations for a lesson plan\n\nWhen to use:\n- For audit trails and history tracking\n- When debugging lesson plan issues\n- For administrative oversight\n\nWhat it does:\n- Returns all operations in chronological order\n- Includes operation type, payload, timestamp, and reason\n- Shows who made each change and when\n  ",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "lessonPlanId",
            "description": "Lesson plan ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "payload": {},
                          "reason": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "sequenceNumber": {
                            "type": "number"
                          },
                          "createdBy": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type",
                          "reason",
                          "createdAt",
                          "sequenceNumber",
                          "createdBy"
                        ]
                      }
                    }
                  },
                  "required": [
                    "operations"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/lessonPlans/{lessonPlanId}/operations/sync": {
      "post": {
        "operationId": "syncOperations",
        "summary": "Sync the operations for a lesson plan",
        "description": "Purpose: Apply pending operations to update the lesson plan\n\nWhen to use:\n- After storing operations, to see the changes take effect\n- For incremental updates without full recreation\n- When you want to apply only recent changes (e.g after running a script to add a lot of operations)\n\nWhat it does:\n- Finds operations that haven't been applied yet\n- Executes them in sequence\n- Updates the lesson plan structure\n- Returns results of each operation\n  ",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "lessonPlanId",
            "description": "Lesson plan ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operations synced",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "operationCount": {
                      "type": "number"
                    },
                    "operationResults": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "success": {
                            "type": "boolean"
                          },
                          "errors": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "message": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "message"
                              ]
                            }
                          }
                        },
                        "required": [
                          "success"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "operationCount",
                    "operationResults"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/lessonPlans/{lessonPlanId}/recreate": {
      "post": {
        "operationId": "recreateLessonPlan",
        "summary": "Recreate a lesson plan from a course and apply all operations",
        "description": "Purpose: Recreate a lesson plan from scratch using it's operation log\n\nWhen to use:\n- When a lesson plan becomes corrupted or out of sync\n- For testing or debugging purposes\n- After detecting and correcting inconsistencies\n\nWhat it does:\n- Deletes all current lesson plan items\n- Rebuilds from the base course structure\n- Applies all operations from the operation log in sequence\n- Returns the operation results for monitoring and inspection\n",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "lessonPlanId",
            "description": "Lesson plan ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lesson plan recreated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "operationCount": {
                      "type": "number"
                    },
                    "operationResults": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "success": {
                            "type": "boolean"
                          },
                          "errors": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "message": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "message"
                              ]
                            }
                          }
                        },
                        "required": [
                          "success"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "operationCount",
                    "operationResults"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/lessonPlans/course/{courseId}/sync": {
      "post": {
        "operationId": "SyncCourseLessonPlans",
        "summary": "Sync Lesson Plans for a Course",
        "description": "Purpose: Bulk synchronization of all lesson plans for a course.\n\nWhen to use:\n- After making significant structural changes to a base course\n- When you need to ensure all students have the latest course content\n\nWhat it does:\n\n- Finds all lesson plans associated with the course\n- Recreates each lesson plan from the base course structure\n- Applies all historical operations to maintain personalizations\n- Return a list of affected lesson plan ID's \n\n  ",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "courseId",
            "description": "Course ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course synced",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonPlansAffected": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "lessonPlansAffected"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/lessonPlans/getCourseProgress/{courseId}/student/{studentId}": {
      "get": {
        "operationId": "getCourseProgress",
        "summary": "Get course progress",
        "description": "\nGet the course progress for a student in a course.\n\n---\n\nReturns a list of **assessment line items** for the **course** and **student**.\n\nA type \"**component**\" indicates a component of the lesson plan such as a unit or lesson.\n\nA type \"**resource**\" indicates a resource such as a video, audio,\nor document file as well as a quiz or question.\n\nEach **line item** contains a list of assessment results in the **results** attribute, related to student and course.\n    ",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "courseId",
            "description": "Course ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studentId",
            "description": "Student ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course progress",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lineItems": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "const": "component"
                              },
                              "assessmentLineItemSourcedId": {
                                "type": "string"
                              },
                              "courseComponentSourcedId": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              },
                              "results": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "sourcedId": {
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "status": {
                                      "type": "string",
                                      "enum": [
                                        "active",
                                        "tobedeleted"
                                      ]
                                    },
                                    "dateLastModified": {
                                      "type": "string",
                                      "format": "date-time"
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "additionalProperties": true,
                                      "nullable": true,
                                      "description": "Additional metadata for the object"
                                    },
                                    "score": {
                                      "type": [
                                        "number",
                                        "null"
                                      ]
                                    },
                                    "textScore": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "scoreDate": {
                                      "type": "string",
                                      "format": "date-time"
                                    },
                                    "scoreScale": {
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "properties": {
                                        "sourcedId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "sourcedId"
                                      ]
                                    },
                                    "scorePercentile": {
                                      "type": [
                                        "number",
                                        "null"
                                      ]
                                    },
                                    "scoreStatus": {
                                      "type": "string",
                                      "enum": [
                                        "exempt",
                                        "fully graded",
                                        "not submitted",
                                        "partially graded",
                                        "submitted"
                                      ]
                                    },
                                    "comment": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "learningObjectiveSet": {
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "source": {
                                            "type": "string"
                                          },
                                          "learningObjectiveResults": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "learningObjectiveId": {
                                                  "type": "string"
                                                },
                                                "score": {
                                                  "type": "number"
                                                },
                                                "textScore": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "learningObjectiveId"
                                              ]
                                            }
                                          }
                                        },
                                        "required": [
                                          "source",
                                          "learningObjectiveResults"
                                        ]
                                      }
                                    },
                                    "inProgress": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "incomplete": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "late": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "missing": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "status",
                                    "scoreDate",
                                    "scoreStatus"
                                  ],
                                  "description": "Represents an assessment result."
                                },
                                "description": "Assessment results for the component and student"
                              }
                            },
                            "required": [
                              "type",
                              "assessmentLineItemSourcedId",
                              "courseComponentSourcedId",
                              "title",
                              "results"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "const": "resource"
                              },
                              "assessmentLineItemSourcedId": {
                                "type": "string"
                              },
                              "courseComponentResourceSourcedId": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              },
                              "results": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "sourcedId": {
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "status": {
                                      "type": "string",
                                      "enum": [
                                        "active",
                                        "tobedeleted"
                                      ]
                                    },
                                    "dateLastModified": {
                                      "type": "string",
                                      "format": "date-time"
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "additionalProperties": true,
                                      "nullable": true,
                                      "description": "Additional metadata for the object"
                                    },
                                    "score": {
                                      "type": [
                                        "number",
                                        "null"
                                      ]
                                    },
                                    "textScore": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "scoreDate": {
                                      "type": "string",
                                      "format": "date-time"
                                    },
                                    "scoreScale": {
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "properties": {
                                        "sourcedId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "sourcedId"
                                      ]
                                    },
                                    "scorePercentile": {
                                      "type": [
                                        "number",
                                        "null"
                                      ]
                                    },
                                    "scoreStatus": {
                                      "type": "string",
                                      "enum": [
                                        "exempt",
                                        "fully graded",
                                        "not submitted",
                                        "partially graded",
                                        "submitted"
                                      ]
                                    },
                                    "comment": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "learningObjectiveSet": {
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "source": {
                                            "type": "string"
                                          },
                                          "learningObjectiveResults": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "learningObjectiveId": {
                                                  "type": "string"
                                                },
                                                "score": {
                                                  "type": "number"
                                                },
                                                "textScore": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "learningObjectiveId"
                                              ]
                                            }
                                          }
                                        },
                                        "required": [
                                          "source",
                                          "learningObjectiveResults"
                                        ]
                                      }
                                    },
                                    "inProgress": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "incomplete": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "late": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "missing": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "status",
                                    "scoreDate",
                                    "scoreStatus"
                                  ],
                                  "description": "Represents an assessment result."
                                },
                                "description": "Assessment results for the resource and student"
                              }
                            },
                            "required": [
                              "type",
                              "assessmentLineItemSourcedId",
                              "courseComponentResourceSourcedId",
                              "title",
                              "results"
                            ]
                          }
                        ]
                      },
                      "description": "Assessment line items for the course and student"
                    }
                  },
                  "required": [
                    "lineItems"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/lessonPlans/tree/{lessonPlanId}": {
      "get": {
        "operationId": "getLessonPlan",
        "summary": "Get a lesson plan tree by its ID",
        "description": "Purpose: Get the complete lesson plan tree for a lesson plan.\n\nWhen to use:\n- When you need to display the full lesson plan to a student\n- For rendering the personalized learning path\n\nWhat it does:\n- Returns the lesson plan in a syllabus-like format\n- Includes only non-skipped items (visible content)\n- Shows the hierarchical structure with components and resources\n- Provides all original metadata needed for UI rendering\n  ",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "lessonPlanId",
            "description": "Lesson plan ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lesson plan tree",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonPlan": {
                      "type": "object",
                      "properties": {
                        "lessonPlan": {
                          "type": "object",
                          "properties": {
                            "course": {
                              "type": "object",
                              "properties": {
                                "sourcedId": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "active",
                                    "tobedeleted"
                                  ]
                                },
                                "dateLastModified": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "metadata": {
                                  "type": "object",
                                  "additionalProperties": true,
                                  "nullable": true,
                                  "description": "Additional metadata for the object"
                                },
                                "title": {
                                  "type": "string"
                                },
                                "academicSession": {
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "sourcedId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "sourcedId"
                                  ]
                                },
                                "schoolYear": {
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "href": {
                                      "type": "string",
                                      "format": "uri"
                                    },
                                    "sourcedId": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "academicSession",
                                        "assessmentLineItem",
                                        "category",
                                        "class",
                                        "course",
                                        "demographics",
                                        "enrollment",
                                        "gradingPeriod",
                                        "lineItem",
                                        "org",
                                        "resource",
                                        "result",
                                        "scoreScale",
                                        "student",
                                        "teacher",
                                        "term",
                                        "user",
                                        "componentResource",
                                        "courseComponent"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "href",
                                    "sourcedId",
                                    "type"
                                  ]
                                },
                                "courseCode": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "grades": {
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/GradeEnum"
                                      }
                                    ],
                                    "description": "The grades of the course",
                                    "enum": [
                                      "-1",
                                      "0",
                                      "1",
                                      "2",
                                      "3",
                                      "4",
                                      "5",
                                      "6",
                                      "7",
                                      "8",
                                      "9",
                                      "10",
                                      "11",
                                      "12",
                                      "13"
                                    ]
                                  }
                                },
                                "subjects": {
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/SubjectEnum"
                                      }
                                    ],
                                    "description": "The subjects of the course",
                                    "enum": [
                                      "Reading",
                                      "Language",
                                      "Vocabulary",
                                      "Social Studies",
                                      "Writing",
                                      "Science",
                                      "FastMath",
                                      "Math"
                                    ]
                                  }
                                },
                                "subjectCodes": {
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "org": {
                                  "type": "object",
                                  "properties": {
                                    "sourcedId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "sourcedId"
                                  ]
                                },
                                "level": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "gradingScheme": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "resources": {
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "href": {
                                        "type": "string",
                                        "format": "uri"
                                      },
                                      "sourcedId": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "academicSession",
                                          "assessmentLineItem",
                                          "category",
                                          "class",
                                          "course",
                                          "demographics",
                                          "enrollment",
                                          "gradingPeriod",
                                          "lineItem",
                                          "org",
                                          "resource",
                                          "result",
                                          "scoreScale",
                                          "student",
                                          "teacher",
                                          "term",
                                          "user",
                                          "componentResource",
                                          "courseComponent"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "href",
                                      "sourcedId",
                                      "type"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "status",
                                "title",
                                "org"
                              ],
                              "description": "Represents a course."
                            },
                            "subComponents": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/LessonPlanTreeComponent"
                              }
                            }
                          },
                          "required": [
                            "course",
                            "subComponents"
                          ]
                        }
                      },
                      "required": [
                        "lessonPlan"
                      ]
                    }
                  },
                  "required": [
                    "lessonPlan"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/lessonPlans/tree/{lessonPlanId}/structure": {
      "get": {
        "operationId": "getLessonPlanStructure",
        "summary": "Get a lesson plan tree structure by its ID",
        "description": "Purpose: Get a simplified structure for inspection and debugging.\n\nWhen to use:\n- For administractive tools and debugging\n- When you need to see the internal lesson plan structure without the full metadata\n\nWhat it does:\n- Returns a lightweight view of the lesson plan structure\n- Shows both skipped and non-skipped items\n- Includes order information and component/resource IDs (alos includes item ids but these should'n be relied on since they are not stable)\n- Useful for understanding the current state\n  ",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "lessonPlanId",
            "description": "Lesson plan ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lesson plan tree structure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonPlan": {
                      "type": "object",
                      "properties": {
                        "lessonPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "courseId": {
                              "type": "string"
                            },
                            "courseTitle": {
                              "type": "string"
                            },
                            "structure": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/LessonPlanStructureNode"
                              }
                            }
                          },
                          "required": [
                            "id",
                            "courseId",
                            "courseTitle",
                            "structure"
                          ]
                        }
                      },
                      "required": [
                        "lessonPlan"
                      ]
                    }
                  },
                  "required": [
                    "lessonPlan"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/lessonPlans/updateStudentItemResponse": {
      "post": {
        "operationId": "updateStudentItemResponse",
        "summary": "Update student item response",
        "description": "\nUpdate the student item response for a student in a course.\n\n---\n\nThe item may be a **component** or **componentResource**.\n\nYou should provide either the **componentId** or the **componentResourceId**.\n\nIf you provide the **componentId**, the data in the response payload should be in relation to the student's response to the entire component.\n\nIf you provide the **componentResourceId**, the data in the response payload should be in relation to the student's response to the specific resource.\n    ",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "studentId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "componentResourceId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "result": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "active",
                          "tobedeleted"
                        ]
                      },
                      "metadata": {
                        "type": "object",
                        "additionalProperties": true,
                        "nullable": true,
                        "description": "Additional metadata for the object"
                      },
                      "score": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "textScore": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "scoreDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "scorePercentile": {
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "scoreStatus": {
                        "type": "string",
                        "enum": [
                          "exempt",
                          "fully graded",
                          "not submitted",
                          "partially graded",
                          "submitted"
                        ]
                      },
                      "comment": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "learningObjectiveSet": {
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "source": {
                              "type": "string"
                            },
                            "learningObjectiveResults": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "learningObjectiveId": {
                                    "type": "string"
                                  },
                                  "score": {
                                    "type": "number"
                                  },
                                  "textScore": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "learningObjectiveId"
                                ]
                              }
                            }
                          },
                          "required": [
                            "source",
                            "learningObjectiveResults"
                          ]
                        }
                      },
                      "inProgress": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "incomplete": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "late": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "missing": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "status",
                      "scoreDate",
                      "scoreStatus"
                    ],
                    "description": "The student's result for the item, either a component or a componentResource"
                  }
                },
                "required": [
                  "studentId",
                  "componentResourceId",
                  "result"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Student item response updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "componentResourceLineItem": {
                      "$ref": "#/components/schemas/AssessmentLineItem"
                    },
                    "componentResourceResult": {
                      "$ref": "#/components/schemas/AssessmentResult"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/syllabus/{courseSourcedId}": {
      "get": {
        "operationId": "getCourseSyllabus",
        "summary": "Get course syllabus",
        "description": "Get course syllabus",
        "tags": [
          "PowerPath - Lesson Plans"
        ],
        "parameters": [
          {
            "name": "courseSourcedId",
            "description": "The course sourcedId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "syllabus": {
                      "description": "The course syllabus content"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/createNewAttempt": {
      "post": {
        "operationId": "createNewAttempt",
        "summary": "Create new attempt",
        "description": "\nCreates a new attempt for a student in a lesson if the current attempt is completed.\n\nFor Assessment Bank lessons:\n- This will also update the state for the student, creating a new entry to associate the new attempt number with a different sub-resource of the test bank.\n- If the lesson is taken again by the student, a different test may be served, considering the new resource it points to configures a different test.\n- The sub-test is determined using round-robin logic over the sub-resources of the lesson's Assessment Bank Resource object.\n  - So for example, if a lesson configures 2 sub-tests, the first attempt serves test 1, the second attempt serves test 2, the third attempt serves test 1 again, and so on.\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object associated with it.\n",
        "tags": [
          "PowerPath - Lesson Mastery"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "student": {
                    "type": "string",
                    "description": "The sourcedId of the student"
                  },
                  "lesson": {
                    "type": "string",
                    "description": "The sourcedId of the lesson (ComponentResource)"
                  }
                },
                "required": [
                  "student",
                  "lesson"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attempt": {
                      "type": "object",
                      "properties": {
                        "attempt": {
                          "type": [
                            "number",
                            "null"
                          ],
                          "description": "The attempt number"
                        },
                        "score": {
                          "type": "number",
                          "description": "The current score for this attempt"
                        },
                        "scoreStatus": {
                          "type": "string",
                          "enum": [
                            "exempt",
                            "fully graded",
                            "not submitted",
                            "partially graded",
                            "submitted"
                          ],
                          "description": "The status of this attempt"
                        },
                        "startedAt": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time",
                          "description": "When this attempt was started"
                        },
                        "completedAt": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "date-time",
                          "description": "When this attempt was completed"
                        }
                      },
                      "required": [
                        "attempt",
                        "score",
                        "scoreStatus",
                        "startedAt",
                        "completedAt"
                      ]
                    }
                  },
                  "required": [
                    "attempt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/finalStudentAssessmentResponse": {
      "post": {
        "operationId": "finalStudentAssessmentResponse",
        "summary": "Finalize a test assessments",
        "description": "\nFinalize a lesson of type `quiz`, `test-out`, or `placement` after all questions have been answered:\n- Evaluates answered questions, attribute scores for each question, and overall lesson score.\n- Checks the correctness of the response using the QTI question's `<qti-response-declaration>` element and update the score accordingly.\n- Creates/updates the AssessmentLineItem and AssessmentResult objects for the student/question pair if it doesn't exist yet.\n\nNot supported for external test lessons as the 3rd party tool is responsible for finalizing the test. Use the **importExternalTestAssignmentResults** endpoint instead.\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object with metadata.lessonType = \"quiz\", \"test-out\", or \"placement\" associated with it.\n",
        "tags": [
          "PowerPath - Lesson Mastery",
          "PowerPath - Course Mastery"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "student": {
                    "type": "string",
                    "description": "The sourcedId of the student"
                  },
                  "lesson": {
                    "type": "string",
                    "description": "The sourcedId of the lesson (ComponentResource)"
                  }
                },
                "required": [
                  "student",
                  "lesson"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lessonType": {
                      "type": "string",
                      "enum": [
                        "quiz",
                        "test-out",
                        "placement",
                        "unit-test"
                      ]
                    },
                    "finalized": {
                      "type": "boolean",
                      "description": "Whether the lesson has been finalized in the current attempt"
                    },
                    "attempt": {
                      "type": "number",
                      "description": "The attempt number"
                    }
                  },
                  "required": [
                    "lessonType",
                    "finalized",
                    "attempt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/getAssessmentProgress": {
      "get": {
        "operationId": "getAssessmentProgress",
        "summary": "Get assessment progress",
        "description": "\nReturns the progress the student has made in the given PowerPath lesson.\n\nA 'Lesson' in this context is a ComponentResource object paired with a Resource object representing an activity.\n",
        "tags": [
          "PowerPath - Lesson Mastery",
          "PowerPath - Course Mastery"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "student",
            "description": "The sourcedId of the student who is answering the question",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the student who is answering the question"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "lesson",
            "description": "The sourcedId of the lesson (ComponentResource)",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the lesson (ComponentResource)"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "attempt",
            "description": "The attempt number of the lesson that the student is answering",
            "schema": {
              "type": "string",
              "description": "The attempt number of the lesson that the student is answering"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PowerPath100ProgressResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "lessonType": {
                          "type": "string",
                          "enum": [
                            "quiz",
                            "test-out",
                            "placement",
                            "unit-test"
                          ]
                        },
                        "finalized": {
                          "type": "boolean",
                          "description": "Whether the lesson has been finalized in the current attempt"
                        },
                        "score": {
                          "type": "number",
                          "description": "The current score for this attempt"
                        },
                        "questions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PowerPathTestQuestion"
                          }
                        },
                        "toolProvider": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The tool provider of the lesson if external"
                        },
                        "attempt": {
                          "type": "number",
                          "description": "The attempt number"
                        },
                        "xp": {
                          "type": [
                            "number",
                            "null"
                          ],
                          "description": "The XP the student has earned in the lesson"
                        },
                        "multiplier": {
                          "type": [
                            "number",
                            "null"
                          ],
                          "description": "The multiplier for the student's XP"
                        },
                        "accuracy": {
                          "type": "number",
                          "description": "The accuracy of the student's attempted questions"
                        },
                        "correctQuestions": {
                          "type": "number",
                          "description": "The number of correct questions the student has answered in the lesson"
                        },
                        "totalQuestions": {
                          "type": "number",
                          "description": "The total number of questions in the lesson"
                        }
                      },
                      "required": [
                        "lessonType",
                        "finalized",
                        "questions",
                        "toolProvider",
                        "attempt",
                        "xp",
                        "multiplier",
                        "accuracy",
                        "correctQuestions",
                        "totalQuestions"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/getAttempts": {
      "get": {
        "operationId": "getAttempts",
        "summary": "Get all attempts",
        "description": "\nReturns a list of all attempts for a student in a lesson\n\nFor Assessment Bank lessons, each attempt may represent a different sub test of the bank. Review results with care.\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object associated with it.\n",
        "tags": [
          "PowerPath - Lesson Mastery"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "student",
            "description": "The sourcedId of the student",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the student"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "lesson",
            "description": "The sourcedId of the lesson (ComponentResource)",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the lesson (ComponentResource)"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attempts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "attempt": {
                            "type": [
                              "number",
                              "null"
                            ],
                            "description": "The attempt number"
                          },
                          "score": {
                            "type": "number",
                            "description": "The current score for this attempt"
                          },
                          "scoreStatus": {
                            "type": "string",
                            "enum": [
                              "exempt",
                              "fully graded",
                              "not submitted",
                              "partially graded",
                              "submitted"
                            ],
                            "description": "The status of this attempt"
                          },
                          "startedAt": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "format": "date-time",
                            "description": "When this attempt was started"
                          },
                          "completedAt": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "format": "date-time",
                            "description": "When this attempt was completed"
                          }
                        },
                        "required": [
                          "attempt",
                          "score",
                          "scoreStatus",
                          "startedAt",
                          "completedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "attempts"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/getNextQuestion": {
      "get": {
        "operationId": "getNextQuestion",
        "summary": "Get next question",
        "description": "\nReturns the next question in the given PowerPath component resource.\n\nWorks only with lessons of type 'powerpath-100'.\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object associated with it.\n",
        "tags": [
          "PowerPath - Lesson Mastery"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "student",
            "description": "The sourcedId of the student who is answering the question",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the student who is answering the question"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "lesson",
            "description": "The sourcedId of the lesson (ComponentResource)",
            "schema": {
              "type": "string",
              "description": "The sourcedId of the lesson (ComponentResource)"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "number",
                      "description": "The current PowerPath score of the student in this lesson"
                    },
                    "question": {
                      "$ref": "#/components/schemas/PowerPathTestQuestion"
                    }
                  },
                  "required": [
                    "score",
                    "question"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/resetAttempt": {
      "post": {
        "operationId": "resetAttempt",
        "summary": "Reset attempt",
        "description": "\nResets the attempt for the given PowerPath lesson of a student:\n- Soft-deletes all previous question responses, resets the test score to 0, and updates its 'scoreStatus' to \"not submitted\".\n- If the lesson is an external test, only resets the test score to 0.\n\nFor Assessment Bank lessons, this will keep the user state in the same bank test for the current attempt.\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object associated with it.\n",
        "tags": [
          "PowerPath - Lesson Mastery"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "student": {
                    "type": "string",
                    "description": "The sourcedId of the student for who the attempt should be reset"
                  },
                  "lesson": {
                    "type": "string",
                    "description": "The sourcedId of the lesson (ComponentResource)"
                  }
                },
                "required": [
                  "student",
                  "lesson"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether the reset was successful"
                    },
                    "score": {
                      "type": "number",
                      "description": "The reset score (always 0)"
                    }
                  },
                  "required": [
                    "success",
                    "score"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/powerpath/updateStudentQuestionResponse": {
      "put": {
        "operationId": "updateStudentQuestionResponse",
        "summary": "Update student question response",
        "description": "\nUpdates the student's response to a question and returns the updated PowerPath score:\n- Checks the correctness of the response using the QTI question `<qti-response-declaration>` element and update the score accordingly.\n- Creates/updates the AssessmentLineItem and AssessmentResult objects for the student/question pair if it doesn't exist yet.\n\nA 'Lesson' in this context is a ComponentResource object which has a Resource object associated with it.\n",
        "tags": [
          "PowerPath - Lesson Mastery",
          "PowerPath - Course Mastery"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudentQuestionResponseInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PowerPath100UpdateStudentQuestionResponseResult"
                    },
                    {
                      "$ref": "#/components/schemas/QuizUpdateStudentQuestionResponseResult"
                    },
                    {
                      "$ref": "#/components/schemas/TestOutUpdateStudentQuestionResponseResult"
                    },
                    {
                      "$ref": "#/components/schemas/PlacementUpdateStudentQuestionResponseResult"
                    },
                    {
                      "$ref": "#/components/schemas/UnitTestUpdateStudentQuestionResponseResult"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "lessonType",
                    "mapping": {
                      "powerpath-100": "#/components/schemas/PowerPath100UpdateStudentQuestionResponseResult",
                      "quiz": "#/components/schemas/QuizUpdateStudentQuestionResponseResult",
                      "test-out": "#/components/schemas/TestOutUpdateStudentQuestionResponseResult",
                      "placement": "#/components/schemas/PlacementUpdateStudentQuestionResponseResult",
                      "unit-test": "#/components/schemas/UnitTestUpdateStudentQuestionResponseResult"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity / Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "MCP": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://alpha-auth-production-idp.auth.us-west-2.amazoncognito.com/oauth2/authorize",
            "tokenUrl": "https://alpha-auth-production-idp.auth.us-west-2.amazoncognito.com/oauth2/token",
            "scopes": {
              "https://purl.imsglobal.org/spec/or/v1p1/scope/roster-core.readonly": "Read access to roster core",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/roster.readonly": "Read access to roster",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/roster-demographics.readonly": "Read access to roster demographics",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/resource.readonly": "Read access to resource",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/gradebook.readonly": "Read access to gradebook",
              "https://purl.imsglobal.org/spec/powerpath/v1p1/scope/powerpath.readonly": "Read access to powerpath",
              "https://purl.imsglobal.org/spec/ob/v3p0/scope/credential.readonly": "Read your issued badges",
              "https://purl.imsglobal.org/spec/clr/v2p0/scope/credential.readonly": "Read access to CLR"
            }
          }
        }
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "scopes": {
              "https://purl.imsglobal.org/spec/or/v1p1/scope/admin": "Admin access to the API",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/roster-core.readonly": "Read access to roster core",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/roster.readonly": "Read access to roster",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/roster.createput": "Create and update access to roster",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/roster.delete": "Delete access to roster",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/roster-demographics.readonly": "Read access to roster demographics",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/roster-demographics.createput": "Create and update access to roster demographics",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/roster-demographics.delete": "Delete access to roster demographics",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/resource.readonly": "Read access to resource",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/resource.createput": "Create and update access to resource",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/resource.delete": "Delete access to resource",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/gradebook.readonly": "Read access to gradebook",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/gradebook.createput": "Create and update access to gradebook",
              "https://purl.imsglobal.org/spec/or/v1p1/scope/gradebook.delete": "Delete access to gradebook",
              "https://purl.imsglobal.org/spec/powerpath/v1p1/scope/powerpath.readonly": "Read access to powerpath",
              "https://purl.imsglobal.org/spec/powerpath/v1p1/scope/powerpath.createput": "Create and update access to powerpath",
              "https://purl.imsglobal.org/spec/powerpath/v1p1/scope/powerpath.delete": "Delete access to powerpath",
              "https://purl.imsglobal.org/spec/powerpath/v1p1/scope/powerpath.admin": "Admin access to powerpath",
              "https://purl.imsglobal.org/spec/ob/v3p0/scope/credential.readonly": "Read your issued badges",
              "https://purl.imsglobal.org/spec/ob/v3p0/scope/credential.upsert": "Store new badges in your account",
              "https://purl.imsglobal.org/spec/ob/v3p0/scope/credential.delete": "Delete access to open badges",
              "https://purl.imsglobal.org/spec/ob/v3p0/scope/credential.admin": "Administrative access to open badges",
              "https://purl.imsglobal.org/spec/clr/v2p0/scope/credential.readonly": "Read access to CLR",
              "https://purl.imsglobal.org/spec/clr/v2p0/scope/credential.upsert": "Create and update access to CLR",
              "https://purl.imsglobal.org/spec/clr/v2p0/scope/credential.admin": "Administrative access to CLR"
            },
            "tokenUrl": "https://alpha-auth-production-idp.auth.us-west-2.amazoncognito.com/oauth2/token"
          }
        }
      }
    },
    "schemas": {
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "imsx_codeMajor": {
            "type": "string",
            "default": "failure",
            "description": "The major response code",
            "example": "failure"
          },
          "imsx_severity": {
            "type": "string",
            "default": "error",
            "description": "The severity of the response",
            "example": "error"
          },
          "imsx_description": {
            "type": "string"
          },
          "imsx_CodeMinor": {
            "type": "object",
            "properties": {
              "imsx_codeMinorField": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "imsx_codeMinorFieldName": {
                      "type": "string",
                      "default": "TargetEndSystem",
                      "description": "The field name for the minor code",
                      "example": "TargetEndSystem"
                    },
                    "imsx_codeMinorFieldValue": {
                      "type": "string",
                      "default": "invaliddata",
                      "description": "The field value for the minor code",
                      "example": "invaliddata"
                    }
                  },
                  "required": [
                    "imsx_codeMinorFieldName",
                    "imsx_codeMinorFieldValue"
                  ]
                }
              }
            },
            "required": [
              "imsx_codeMinorField"
            ]
          },
          "imsx_error_details": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "imsx_codeMajor",
          "imsx_severity",
          "imsx_description",
          "imsx_CodeMinor"
        ]
      },
      "UnauthorizedRequestResponse": {
        "type": "object",
        "properties": {
          "imsx_codeMajor": {
            "type": "string",
            "default": "failure",
            "description": "The major response code",
            "example": "failure"
          },
          "imsx_severity": {
            "type": "string",
            "default": "error",
            "description": "The severity of the response",
            "example": "error"
          },
          "imsx_description": {
            "type": "string"
          },
          "imsx_CodeMinor": {
            "type": "object",
            "properties": {
              "imsx_codeMinorField": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "imsx_codeMinorFieldName": {
                      "type": "string",
                      "default": "TargetEndSystem",
                      "description": "The field name for the minor code",
                      "example": "TargetEndSystem"
                    },
                    "imsx_codeMinorFieldValue": {
                      "type": "string",
                      "default": "unauthorisedrequest",
                      "description": "The field value for the minor code",
                      "example": "unauthorisedrequest"
                    }
                  },
                  "required": [
                    "imsx_codeMinorFieldName",
                    "imsx_codeMinorFieldValue"
                  ]
                }
              }
            },
            "required": [
              "imsx_codeMinorField"
            ]
          },
          "imsx_error_details": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "imsx_codeMajor",
          "imsx_severity",
          "imsx_description",
          "imsx_CodeMinor"
        ]
      },
      "ForbiddenResponse": {
        "type": "object",
        "properties": {
          "imsx_codeMajor": {
            "type": "string",
            "default": "failure",
            "description": "The major response code",
            "example": "failure"
          },
          "imsx_severity": {
            "type": "string",
            "default": "error",
            "description": "The severity of the response",
            "example": "error"
          },
          "imsx_description": {
            "type": "string"
          },
          "imsx_CodeMinor": {
            "type": "object",
            "properties": {
              "imsx_codeMinorField": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "imsx_codeMinorFieldName": {
                      "type": "string",
                      "default": "TargetEndSystem",
                      "description": "The field name for the minor code",
                      "example": "TargetEndSystem"
                    },
                    "imsx_codeMinorFieldValue": {
                      "type": "string",
                      "default": "forbidden",
                      "description": "The field value for the minor code",
                      "example": "forbidden"
                    }
                  },
                  "required": [
                    "imsx_codeMinorFieldName",
                    "imsx_codeMinorFieldValue"
                  ]
                }
              }
            },
            "required": [
              "imsx_codeMinorField"
            ]
          },
          "imsx_error_details": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "imsx_codeMajor",
          "imsx_severity",
          "imsx_description",
          "imsx_CodeMinor"
        ]
      },
      "NotFoundResponse": {
        "type": "object",
        "properties": {
          "imsx_codeMajor": {
            "type": "string",
            "default": "failure",
            "description": "The major response code",
            "example": "failure"
          },
          "imsx_severity": {
            "type": "string",
            "default": "error",
            "description": "The severity of the response",
            "example": "error"
          },
          "imsx_description": {
            "type": "string"
          },
          "imsx_CodeMinor": {
            "type": "object",
            "properties": {
              "imsx_codeMinorField": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "imsx_codeMinorFieldName": {
                      "type": "string",
                      "default": "TargetEndSystem",
                      "description": "The field name for the minor code",
                      "example": "TargetEndSystem"
                    },
                    "imsx_codeMinorFieldValue": {
                      "type": "string",
                      "default": "unknownobject",
                      "description": "The field value for the minor code",
                      "example": "unknownobject"
                    }
                  },
                  "required": [
                    "imsx_codeMinorFieldName",
                    "imsx_codeMinorFieldValue"
                  ]
                }
              }
            },
            "required": [
              "imsx_codeMinorField"
            ]
          },
          "imsx_error_details": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "imsx_codeMajor",
          "imsx_severity",
          "imsx_description",
          "imsx_CodeMinor"
        ]
      },
      "UnprocessableEntityResponse": {
        "type": "object",
        "properties": {
          "imsx_codeMajor": {
            "type": "string",
            "default": "failure",
            "description": "The major response code",
            "example": "failure"
          },
          "imsx_severity": {
            "type": "string",
            "default": "error",
            "description": "The severity of the response",
            "example": "error"
          },
          "imsx_description": {
            "type": "string"
          },
          "imsx_CodeMinor": {
            "type": "object",
            "properties": {
              "imsx_codeMinorField": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "imsx_codeMinorFieldName": {
                      "type": "string",
                      "default": "TargetEndSystem",
                      "description": "The field name for the minor code",
                      "example": "TargetEndSystem"
                    },
                    "imsx_codeMinorFieldValue": {
                      "type": "string",
                      "default": "invaliddata",
                      "description": "The field value for the minor code",
                      "example": "invaliddata"
                    }
                  },
                  "required": [
                    "imsx_codeMinorFieldName",
                    "imsx_codeMinorFieldValue"
                  ]
                }
              }
            },
            "required": [
              "imsx_codeMinorField"
            ]
          },
          "imsx_error_details": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "imsx_codeMajor",
          "imsx_severity",
          "imsx_description",
          "imsx_CodeMinor"
        ]
      },
      "TooManyRequestsResponse": {
        "type": "object",
        "properties": {
          "imsx_codeMajor": {
            "type": "string",
            "default": "failure",
            "description": "The major response code",
            "example": "failure"
          },
          "imsx_severity": {
            "type": "string",
            "default": "error",
            "description": "The severity of the response",
            "example": "error"
          },
          "imsx_description": {
            "type": "string"
          },
          "imsx_CodeMinor": {
            "type": "object",
            "properties": {
              "imsx_codeMinorField": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "imsx_codeMinorFieldName": {
                      "type": "string",
                      "default": "TargetEndSystem",
                      "description": "The field name for the minor code",
                      "example": "TargetEndSystem"
                    },
                    "imsx_codeMinorFieldValue": {
                      "type": "string",
                      "default": "server_busy",
                      "description": "The field value for the minor code",
                      "example": "server_busy"
                    }
                  },
                  "required": [
                    "imsx_codeMinorFieldName",
                    "imsx_codeMinorFieldValue"
                  ]
                }
              }
            },
            "required": [
              "imsx_codeMinorField"
            ]
          },
          "imsx_error_details": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "imsx_codeMajor",
          "imsx_severity",
          "imsx_description",
          "imsx_CodeMinor"
        ]
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "properties": {
          "imsx_codeMajor": {
            "type": "string",
            "default": "failure",
            "description": "The major response code",
            "example": "failure"
          },
          "imsx_severity": {
            "type": "string",
            "default": "error",
            "description": "The severity of the response",
            "example": "error"
          },
          "imsx_description": {
            "type": "string"
          },
          "imsx_CodeMinor": {
            "type": "object",
            "properties": {
              "imsx_codeMinorField": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "imsx_codeMinorFieldName": {
                      "type": "string",
                      "default": "TargetEndSystem",
                      "description": "The field name for the minor code",
                      "example": "TargetEndSystem"
                    },
                    "imsx_codeMinorFieldValue": {
                      "type": "string",
                      "default": "internal_server_error",
                      "description": "The field value for the minor code",
                      "example": "internal_server_error"
                    }
                  },
                  "required": [
                    "imsx_codeMinorFieldName",
                    "imsx_codeMinorFieldValue"
                  ]
                }
              }
            },
            "required": [
              "imsx_codeMinorField"
            ]
          },
          "imsx_error_details": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "imsx_codeMajor",
          "imsx_severity",
          "imsx_description",
          "imsx_CodeMinor"
        ]
      },
      "GradeEnum": {
        "type": "string",
        "enum": [
          "-1",
          "0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "10",
          "11",
          "12",
          "13"
        ],
        "description": "Grade levels. -1 is Pre-K, 0 is Kindergarten, 1-12 are grades 1-12, 13 is AP."
      },
      "SubjectEnum": {
        "type": "string",
        "enum": [
          "Reading",
          "Language",
          "Vocabulary",
          "Social Studies",
          "Writing",
          "Science",
          "FastMath",
          "Math"
        ]
      },
      "CreateExternalTestOutInput": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "description": "The sourcedId of the Course to create the external test for"
          },
          "lessonTitle": {
            "type": "string",
            "description": "The title of the external test reference"
          },
          "launchUrl": {
            "type": "string",
            "description": "The URL to the external test system (e.g., Edulastic, QTI, etc.)"
          },
          "toolProvider": {
            "type": "string",
            "enum": [
              "edulastic",
              "mastery-track"
            ],
            "description": "The type of external service (e.g.: 'edulastic')"
          },
          "unitTitle": {
            "type": "string",
            "description": "The title of the unit containing the external test"
          },
          "courseComponentSourcedId": {
            "type": "string",
            "description": "The sourcedId of an existing CourseComponent (unit) for the test. If not provided, a new unit will be created."
          },
          "vendorId": {
            "type": "string",
            "description": "The ID of the test in the spreadsheet"
          },
          "description": {
            "type": "string",
            "description": "Description of the external test that will be added to the Resource entity's metadata"
          },
          "resourceMetadata": {
            "type": "null",
            "description": "Additional metadata for the external test resource"
          },
          "grades": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The grades of the course",
              "enum": [
                "-1",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13"
              ]
            },
            "description": "The grades for the resource"
          },
          "lessonType": {
            "type": "string",
            "const": "test-out"
          },
          "xp": {
            "type": "number",
            "description": "The XP value for the resource"
          }
        },
        "required": [
          "courseId",
          "toolProvider",
          "grades",
          "lessonType",
          "xp"
        ],
        "description": "Input for creating an external test-out lesson"
      },
      "CreateExternalPlacementInput": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "description": "The sourcedId of the Course to create the external test for"
          },
          "lessonTitle": {
            "type": "string",
            "description": "The title of the external test reference"
          },
          "launchUrl": {
            "type": "string",
            "description": "The URL to the external test system (e.g., Edulastic, QTI, etc.)"
          },
          "toolProvider": {
            "type": "string",
            "enum": [
              "edulastic",
              "mastery-track"
            ],
            "description": "The type of external service (e.g.: 'edulastic')"
          },
          "unitTitle": {
            "type": "string",
            "description": "The title of the unit containing the external test"
          },
          "courseComponentSourcedId": {
            "type": "string",
            "description": "The sourcedId of an existing CourseComponent (unit) for the test. If not provided, a new unit will be created."
          },
          "vendorId": {
            "type": "string",
            "description": "The ID of the test in the spreadsheet"
          },
          "description": {
            "type": "string",
            "description": "Description of the external test that will be added to the Resource entity's metadata"
          },
          "resourceMetadata": {
            "type": "null",
            "description": "Additional metadata for the external test resource"
          },
          "grades": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The grades of the course",
              "enum": [
                "-1",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13"
              ]
            },
            "description": "The grades for the resource"
          },
          "lessonType": {
            "type": "string",
            "const": "placement"
          },
          "courseIdOnFail": {
            "type": [
              "string",
              "null"
            ],
            "description": "The courseId to enroll the student in if they fail the placement test (optional)"
          },
          "xp": {
            "type": "number",
            "description": "The XP value for the resource"
          }
        },
        "required": [
          "courseId",
          "toolProvider",
          "grades",
          "lessonType"
        ],
        "description": "Input for creating an external placement test"
      },
      "CreateInternalQtiTestInput": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "description": "The sourcedId of the Course to create the internal test for"
          },
          "lessonType": {
            "type": "string",
            "enum": [
              "powerpath-100",
              "quiz",
              "test-out",
              "placement",
              "unit-test",
              "alpha-read-article"
            ],
            "description": "The type of lesson to create"
          },
          "lessonTitle": {
            "type": "string",
            "description": "Optional title for the lesson (ComponentResource)"
          },
          "unitTitle": {
            "type": "string",
            "description": "Optional title for the unit (CourseComponent)"
          },
          "courseComponentSourcedId": {
            "type": "string",
            "description": "Optional sourcedId of existing CourseComponent to reuse"
          },
          "resourceMetadata": {
            "type": "null",
            "description": "Additional metadata for the internal test resource"
          },
          "xp": {
            "type": "number",
            "description": "The XP value for the resource (for test-out lessons)"
          },
          "grades": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The grades of the course",
              "enum": [
                "-1",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13"
              ]
            },
            "description": "The grades for the resource (for placement tests)"
          },
          "courseIdOnFail": {
            "type": [
              "string",
              "null"
            ],
            "description": "The courseId to enroll the student in if they fail the placement test (optional)"
          },
          "testType": {
            "type": "string",
            "const": "qti"
          },
          "qti": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to the QTI test XML file"
              },
              "title": {
                "type": "string",
                "description": "Optional title for the QTI test"
              },
              "metadata": {
                "type": "object",
                "additionalProperties": {},
                "description": "Additional metadata for the QTI resource"
              }
            },
            "required": [
              "url"
            ]
          }
        },
        "required": [
          "courseId",
          "lessonType",
          "testType",
          "qti"
        ],
        "description": "Input for creating an internal QTI test"
      },
      "CreateInternalAssessmentBankInput": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "description": "The sourcedId of the Course to create the internal test for"
          },
          "lessonType": {
            "type": "string",
            "enum": [
              "powerpath-100",
              "quiz",
              "test-out",
              "placement",
              "unit-test",
              "alpha-read-article"
            ],
            "description": "The type of lesson to create"
          },
          "lessonTitle": {
            "type": "string",
            "description": "Optional title for the lesson (ComponentResource)"
          },
          "unitTitle": {
            "type": "string",
            "description": "Optional title for the unit (CourseComponent)"
          },
          "courseComponentSourcedId": {
            "type": "string",
            "description": "Optional sourcedId of existing CourseComponent to reuse"
          },
          "resourceMetadata": {
            "type": "null",
            "description": "Additional metadata for the internal test resource"
          },
          "xp": {
            "type": "number",
            "description": "The XP value for the resource (for test-out lessons)"
          },
          "grades": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The grades of the course",
              "enum": [
                "-1",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13"
              ]
            },
            "description": "The grades for the resource (for placement tests)"
          },
          "courseIdOnFail": {
            "type": [
              "string",
              "null"
            ],
            "description": "The courseId to enroll the student in if they fail the placement test (optional)"
          },
          "testType": {
            "type": "string",
            "const": "assessment-bank"
          },
          "assessmentBank": {
            "type": "object",
            "properties": {
              "resources": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri",
                      "description": "The URL to the QTI test XML file"
                    },
                    "title": {
                      "type": "string",
                      "description": "Title for this assessment bank resource"
                    },
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {},
                      "description": "Additional metadata for the QTI resource"
                    }
                  },
                  "required": [
                    "url"
                  ]
                },
                "minItems": 1,
                "description": "Array of QTI resources that will make up the assessment bank"
              }
            },
            "required": [
              "resources"
            ]
          }
        },
        "required": [
          "courseId",
          "lessonType",
          "testType",
          "assessmentBank"
        ],
        "description": "Input for creating an internal assessment bank test"
      },
      "TestOutResult": {
        "type": "object",
        "properties": {
          "lessonType": {
            "type": "string",
            "const": "test-out"
          },
          "lessonId": {
            "type": [
              "string",
              "null"
            ],
            "description": "The id of the testOut lesson"
          },
          "finalized": {
            "type": "boolean",
            "description": "Whether the Test Out has been finalized in the current attempt"
          },
          "toolProvider": {
            "type": [
              "string",
              "null"
            ],
            "description": "The tool provider for the testOut lesson"
          },
          "attempt": {
            "type": "number",
            "description": "The attempt number"
          },
          "credentials": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email"
              },
              "password": {
                "type": "string"
              }
            },
            "required": [
              "email",
              "password"
            ],
            "description": "The credentials for accessing the assigned test on external tool"
          },
          "assignmentId": {
            "type": "string",
            "description": "The id of the assignment on external tool for results retrieval"
          },
          "classId": {
            "type": "string",
            "description": "The id of the class on external tool for results retrieval (may be empty for some tools)"
          },
          "testUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the test on external tool"
          },
          "testId": {
            "type": "string",
            "description": "The id of the test on external tool (may be assignment ID for some tools)"
          }
        },
        "required": [
          "lessonType",
          "lessonId",
          "finalized",
          "toolProvider"
        ],
        "description": "Holds the id of the TestOut lesson (ComponentResource), or its results in case it was previously attempted"
      },
      "LessonPlanTreeComponent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the lesson plan item"
          },
          "sourcedId": {
            "type": "string",
            "description": "The Sourced ID of the component"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "tobedeleted"
            ]
          },
          "title": {
            "type": "string"
          },
          "sortOrder": {
            "type": "string"
          },
          "unlockDate": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {}
          },
          "prerequisites": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prerequisiteCriteria": {
            "type": "string"
          },
          "componentResources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tenantId": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "clientAppId": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "id": {
                  "type": "string",
                  "description": "The ID of the lesson plan item"
                },
                "sortOrder": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object",
                  "additionalProperties": {}
                },
                "courseComponentSourcedId": {
                  "type": "string"
                },
                "resource": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Resource"
                    }
                  ],
                  "properties": {
                    "metadataDetails": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "metadataDetails"
                  ]
                }
              },
              "required": [
                "tenantId",
                "clientAppId",
                "id",
                "courseComponentSourcedId",
                "resource"
              ]
            }
          },
          "subComponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LessonPlanTreeComponent"
            }
          }
        },
        "required": [
          "id",
          "sourcedId",
          "status",
          "title"
        ]
      },
      "Resource": {
        "type": "object",
        "properties": {
          "sourcedId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "tobedeleted"
            ]
          },
          "dateLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true,
            "description": "Additional metadata for the object"
          },
          "title": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "primary",
                "secondary"
              ]
            }
          },
          "importance": {
            "type": "string",
            "enum": [
              "primary",
              "secondary"
            ]
          },
          "vendorResourceId": {
            "type": "string"
          },
          "vendorId": {
            "type": [
              "string",
              "null"
            ]
          },
          "applicationId": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "sourcedId",
          "status",
          "title",
          "vendorResourceId"
        ],
        "description": "Represents a digital resource of some kind."
      },
      "SetSkippedCommand": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "set-skipped"
          },
          "payload": {
            "type": "object",
            "properties": {
              "target": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "component",
                      "resource"
                    ]
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "id"
                ],
                "description": "The target item to set the skipped attribute of"
              },
              "value": {
                "type": "boolean",
                "description": "The value to set the skipped attribute to"
              }
            },
            "required": [
              "target",
              "value"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "type",
          "payload"
        ],
        "additionalProperties": false,
        "title": "Set Skipped",
        "description": "Set the skipped attribute of a lesson plan item, effectively changing it's visibility for the student"
      },
      "AddCustomResourceCommand": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "add-custom-resource"
          },
          "payload": {
            "type": "object",
            "properties": {
              "resource_id": {
                "type": "string"
              },
              "parent_component_id": {
                "type": "string"
              },
              "skipped": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "resource_id",
              "parent_component_id"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "type",
          "payload"
        ],
        "additionalProperties": false,
        "title": "Add Custom Resource",
        "description": "Add a custom resource to the lesson plan under a component, by default the resource is placed at the end of the component"
      },
      "MoveItemBeforeCommand": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "move-item-before"
          },
          "payload": {
            "type": "object",
            "properties": {
              "target": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "component",
                      "resource"
                    ]
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "id"
                ]
              },
              "reference_id": {
                "type": "string"
              }
            },
            "required": [
              "target",
              "reference_id"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "type",
          "payload"
        ],
        "additionalProperties": false,
        "title": "Move Item Before",
        "description": "Move a lesson plan item to be before another item"
      },
      "MoveItemAfterCommand": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "move-item-after"
          },
          "payload": {
            "type": "object",
            "properties": {
              "target": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "component",
                      "resource"
                    ]
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "id"
                ]
              },
              "reference_id": {
                "type": "string"
              }
            },
            "required": [
              "target",
              "reference_id"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "type",
          "payload"
        ],
        "additionalProperties": false,
        "title": "Move Item After",
        "description": "Move a lesson plan item to be after another item"
      },
      "MoveItemToStartCommand": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "move-item-to-start"
          },
          "payload": {
            "type": "object",
            "properties": {
              "target": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "component",
                      "resource"
                    ]
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "id"
                ]
              }
            },
            "required": [
              "target"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "type",
          "payload"
        ],
        "additionalProperties": false,
        "title": "Move Item To Start",
        "description": "Move a lesson plan item to the start of the parent"
      },
      "MoveItemToEndCommand": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "move-item-to-end"
          },
          "payload": {
            "type": "object",
            "properties": {
              "target": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "component",
                      "resource"
                    ]
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "id"
                ]
              }
            },
            "required": [
              "target"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "type",
          "payload"
        ],
        "additionalProperties": false,
        "title": "Move Item To End",
        "description": "Move a lesson plan item to the end of the parent"
      },
      "ChangeItemParentCommand": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "change-item-parent"
          },
          "payload": {
            "type": "object",
            "properties": {
              "target": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "component",
                      "resource"
                    ]
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "id"
                ]
              },
              "new_parent_id": {
                "type": "string"
              },
              "position": {
                "type": "string",
                "enum": [
                  "start",
                  "end"
                ],
                "default": "end"
              }
            },
            "required": [
              "target",
              "new_parent_id"
            ]
          }
        },
        "required": [
          "type",
          "payload"
        ],
        "additionalProperties": false,
        "title": "Change Item Parent",
        "description": "Change the parent of a lesson plan item, by default the item is placed at the end of the parent"
      },
      "LessonPlanStructureNode": {
        "type": "object",
        "properties": {
          "componentResourceId": {
            "type": "string"
          },
          "componentId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "component",
              "resource"
            ]
          },
          "title": {
            "type": "string"
          },
          "order": {
            "type": "string"
          },
          "skipped": {
            "type": "boolean"
          },
          "itemId": {
            "type": "string"
          },
          "componentResources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LessonPlanStructureNode"
            }
          },
          "subComponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LessonPlanStructureNode"
            }
          }
        },
        "required": [
          "type",
          "title",
          "order",
          "skipped",
          "itemId"
        ]
      },
      "AssessmentLineItem": {
        "type": "object",
        "properties": {
          "sourcedId": {
            "type": "string",
            "minLength": 1
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "tobedeleted"
            ]
          },
          "dateLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true,
            "description": "Additional metadata for the object"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "class": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "sourcedId": {
                "type": "string"
              }
            },
            "required": [
              "sourcedId"
            ]
          },
          "parentAssessmentLineItem": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "sourcedId": {
                "type": "string"
              }
            },
            "required": [
              "sourcedId"
            ],
            "description": "Represents a parent assessment line item."
          },
          "scoreScale": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "sourcedId": {
                "type": "string"
              }
            },
            "required": [
              "sourcedId"
            ],
            "description": "Represents a score scale."
          },
          "resultValueMin": {
            "type": [
              "number",
              "null"
            ]
          },
          "resultValueMax": {
            "type": [
              "number",
              "null"
            ]
          },
          "component": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "sourcedId": {
                "type": "string"
              }
            },
            "required": [
              "sourcedId"
            ],
            "description": "PROPRIETARY EXTENSION: Reference to the Component that this assessment line item is associated with. Enables enhanced curriculum mapping."
          },
          "componentResource": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "sourcedId": {
                "type": "string"
              }
            },
            "required": [
              "sourcedId"
            ],
            "description": "PROPRIETARY EXTENSION: Reference to the Component Resource that this assessment line item is associated with. Supports detailed content-to-assessment relationships."
          },
          "learningObjectiveSet": {
            "$ref": "#/components/schemas/LearningObjectiveSet"
          }
        },
        "required": [
          "status",
          "title"
        ],
        "description": "Represents an assessment line item."
      },
      "LearningObjectiveSet": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object",
          "properties": {
            "source": {
              "type": "string"
            },
            "learningObjectiveIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "source",
            "learningObjectiveIds"
          ]
        },
        "description": "Represents a learning objective set."
      },
      "AssessmentResult": {
        "type": "object",
        "properties": {
          "sourcedId": {
            "type": "string",
            "minLength": 1
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "tobedeleted"
            ]
          },
          "dateLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true,
            "description": "Additional metadata for the object"
          },
          "assessmentLineItem": {
            "type": "object",
            "properties": {
              "sourcedId": {
                "type": "string"
              }
            },
            "required": [
              "sourcedId"
            ]
          },
          "student": {
            "type": "object",
            "properties": {
              "sourcedId": {
                "type": "string"
              }
            },
            "required": [
              "sourcedId"
            ]
          },
          "score": {
            "type": [
              "number",
              "null"
            ]
          },
          "textScore": {
            "type": [
              "string",
              "null"
            ]
          },
          "scoreDate": {
            "type": "string",
            "format": "date-time"
          },
          "scoreScale": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "sourcedId": {
                "type": "string"
              }
            },
            "required": [
              "sourcedId"
            ]
          },
          "scorePercentile": {
            "type": [
              "number",
              "null"
            ]
          },
          "scoreStatus": {
            "type": "string",
            "enum": [
              "exempt",
              "fully graded",
              "not submitted",
              "partially graded",
              "submitted"
            ]
          },
          "comment": {
            "type": [
              "string",
              "null"
            ]
          },
          "learningObjectiveSet": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string"
                },
                "learningObjectiveResults": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "learningObjectiveId": {
                        "type": "string"
                      },
                      "score": {
                        "type": "number"
                      },
                      "textScore": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "learningObjectiveId"
                    ]
                  }
                }
              },
              "required": [
                "source",
                "learningObjectiveResults"
              ]
            }
          },
          "inProgress": {
            "type": [
              "string",
              "null"
            ]
          },
          "incomplete": {
            "type": [
              "string",
              "null"
            ]
          },
          "late": {
            "type": [
              "string",
              "null"
            ]
          },
          "missing": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "status",
          "assessmentLineItem",
          "student",
          "scoreDate",
          "scoreStatus"
        ],
        "description": "Represents an assessment result."
      },
      "PowerPath100ProgressResult": {
        "type": "object",
        "properties": {
          "lessonType": {
            "type": "string",
            "const": "powerpath-100"
          },
          "remainingQuestionsPerDifficulty": {
            "type": "object",
            "properties": {
              "easy": {
                "type": "number"
              },
              "medium": {
                "type": "number"
              },
              "hard": {
                "type": "number"
              }
            },
            "required": [
              "easy",
              "medium",
              "hard"
            ]
          },
          "score": {
            "type": "number",
            "description": "The current score for this attempt"
          },
          "seenQuestions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID that represents the question in the test"
                },
                "index": {
                  "type": "number",
                  "description": "The index of the question in the test"
                },
                "title": {
                  "type": "string",
                  "description": "The title of the question"
                },
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "The URL of the QTI question"
                },
                "difficulty": {
                  "type": "string",
                  "enum": [
                    "easy",
                    "medium",
                    "hard"
                  ],
                  "default": "medium",
                  "description": "The difficulty of the question"
                },
                "humanApproved": {
                  "type": [
                    "boolean",
                    "null"
                  ],
                  "description": "Whether the question has been approved by a human"
                },
                "content": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the question"
                    },
                    "rawXml": {
                      "type": "string",
                      "description": "The raw XML question in QTI format"
                    }
                  },
                  "required": [
                    "rawXml"
                  ],
                  "description": "The QTI content of the question"
                },
                "response": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ],
                  "description": "The student's response to the question"
                },
                "correct": {
                  "type": "boolean",
                  "description": "Whether the student's response is correct"
                },
                "result": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "number",
                      "description": "The score assigned to the question, considering the student's response"
                    },
                    "feedback": {
                      "type": "string",
                      "description": "The feedback for the question"
                    }
                  },
                  "required": [
                    "score",
                    "feedback"
                  ],
                  "description": "The result of the question"
                },
                "learningObjectives": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of learning objective IDs associated with the question"
                }
              },
              "required": [
                "id",
                "index",
                "title",
                "url",
                "difficulty",
                "response"
              ],
              "description": "A PowerPath Test Question"
            }
          },
          "attempt": {
            "type": "number",
            "description": "The attempt number"
          },
          "xp": {
            "type": [
              "number",
              "null"
            ],
            "description": "The XP the student has earned in the lesson"
          },
          "multiplier": {
            "type": [
              "number",
              "null"
            ],
            "description": "The multiplier for the student's XP"
          },
          "accuracy": {
            "type": "number",
            "description": "The accuracy of the student's attempted questions"
          },
          "correctQuestions": {
            "type": "number",
            "description": "The number of correct questions the student has answered in the lesson"
          },
          "totalQuestions": {
            "type": "number",
            "description": "The total number of questions in the lesson"
          }
        },
        "required": [
          "lessonType",
          "remainingQuestionsPerDifficulty",
          "score",
          "seenQuestions",
          "attempt",
          "xp",
          "multiplier",
          "accuracy",
          "correctQuestions",
          "totalQuestions"
        ],
        "description": "Represents the progress of the student in the PowerPath100 lesson"
      },
      "PowerPathTestQuestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID that represents the question in the test"
          },
          "index": {
            "type": "number",
            "description": "The index of the question in the test"
          },
          "title": {
            "type": "string",
            "description": "The title of the question"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the QTI question"
          },
          "difficulty": {
            "type": "string",
            "enum": [
              "easy",
              "medium",
              "hard"
            ],
            "default": "medium",
            "description": "The difficulty of the question"
          },
          "humanApproved": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether the question has been approved by a human"
          },
          "content": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the question"
              },
              "rawXml": {
                "type": "string",
                "description": "The raw XML question in QTI format"
              }
            },
            "required": [
              "rawXml"
            ],
            "description": "The QTI content of the question"
          },
          "response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "The student's response to the question"
          },
          "correct": {
            "type": "boolean",
            "description": "Whether the student's response is correct"
          },
          "result": {
            "type": "object",
            "properties": {
              "score": {
                "type": "number",
                "description": "The score assigned to the question, considering the student's response"
              },
              "feedback": {
                "type": "string",
                "description": "The feedback for the question"
              }
            },
            "required": [
              "score",
              "feedback"
            ],
            "description": "The result of the question"
          },
          "learningObjectives": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of learning objective IDs associated with the question"
          }
        },
        "required": [
          "id",
          "index",
          "title",
          "url",
          "difficulty"
        ],
        "description": "A PowerPath Test Question"
      },
      "UpdateStudentQuestionResponseInput": {
        "type": "object",
        "properties": {
          "student": {
            "type": "string",
            "description": "The sourcedId of the student who is answering the question"
          },
          "question": {
            "type": "string",
            "description": "The sourcedId of the ComponentResource that represents the question within the course"
          },
          "response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "The student's response to the question. Might be the reference to the choice specified in the QTI structure."
          },
          "lesson": {
            "type": "string",
            "description": "The sourcedId of the lesson (ComponentResource)"
          }
        },
        "required": [
          "student",
          "question",
          "response",
          "lesson"
        ],
        "description": "The input for the updateStudentQuestionResponse endpoint"
      },
      "PowerPath100UpdateStudentQuestionResponseResult": {
        "type": "object",
        "properties": {
          "lessonType": {
            "type": "string",
            "const": "powerpath-100"
          },
          "powerpathScore": {
            "type": "number",
            "description": "The updated PowerPath score of the student in this lesson"
          },
          "responseResult": {
            "type": "object",
            "properties": {
              "score": {
                "type": "number",
                "description": "The score for this specific response (0 or 1)"
              },
              "feedback": {
                "description": "Optional feedback for the student's response"
              }
            },
            "required": [
              "score"
            ],
            "description": "The result of processing the student's response"
          },
          "questionResult": {
            "description": "The assessment result object for the question (for debugging)"
          },
          "testResult": {
            "description": "The assessment result object for the test (for debugging)"
          },
          "accuracy": {
            "type": "number",
            "description": "The accuracy of the student's attempted questions"
          },
          "correctQuestions": {
            "type": "number",
            "description": "The number of correct questions the student has answered in the lesson"
          },
          "totalQuestions": {
            "type": "number",
            "description": "The total number of questions in the lesson"
          },
          "xp": {
            "type": [
              "number",
              "null"
            ],
            "description": "The XP the student has earned in the lesson"
          },
          "multiplier": {
            "type": [
              "number",
              "null"
            ],
            "description": "The multiplier for the student's XP"
          }
        },
        "required": [
          "lessonType",
          "powerpathScore",
          "responseResult",
          "accuracy",
          "correctQuestions",
          "totalQuestions",
          "xp",
          "multiplier"
        ],
        "description": "Represents the result of updating the student's response to the question in the PowerPath100 lesson (ComponentResource)"
      },
      "QuizUpdateStudentQuestionResponseResult": {
        "type": "object",
        "properties": {
          "questionResult": {
            "description": "The assessment result object for the question (for debugging)"
          },
          "lessonType": {
            "type": "string",
            "const": "quiz"
          }
        },
        "required": [
          "lessonType"
        ],
        "description": "Represents the result of updating the student's response to the question in the PowerPath Quiz lesson"
      },
      "TestOutUpdateStudentQuestionResponseResult": {
        "type": "object",
        "properties": {
          "questionResult": {
            "description": "The assessment result object for the question (for debugging)"
          },
          "lessonType": {
            "type": "string",
            "const": "test-out"
          }
        },
        "required": [
          "lessonType"
        ],
        "description": "Represents the result of updating the student's response to the question in the PowerPath Test Out lesson"
      },
      "PlacementUpdateStudentQuestionResponseResult": {
        "type": "object",
        "properties": {
          "questionResult": {
            "description": "The assessment result object for the question (for debugging)"
          },
          "lessonType": {
            "type": "string",
            "const": "placement"
          }
        },
        "required": [
          "lessonType"
        ],
        "description": "Represents the result of updating the student's response to the question in the PowerPath Placement test"
      },
      "UnitTestUpdateStudentQuestionResponseResult": {
        "type": "object",
        "properties": {
          "questionResult": {
            "description": "The assessment result object for the question (for debugging)"
          },
          "lessonType": {
            "type": "string",
            "const": "unit-test"
          }
        },
        "required": [
          "lessonType"
        ],
        "description": "Represents the result of updating the student's response to the question in the PowerPath Unit Test lesson"
      }
    }
  }
}